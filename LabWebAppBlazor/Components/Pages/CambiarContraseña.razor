@page "/cambiar-contraseña"
@rendermode InteractiveServer
<PageTitle>Cambiar Contraseña</PageTitle>

@using LabWebAppBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="container mt-4" style="max-width: 500px;">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex align-items-center">
            <i class="bi bi-key-fill me-2"></i>
            <h5 class="m-0">Cambiar Contraseña</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@modelo" OnValidSubmit="Cambiar">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="nuevaClave" class="form-label">Nueva Contraseña</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                        <InputText id="nuevaClave" @bind-Value="modelo.NuevaClave" class="form-control" type="password" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="confirmarClave" class="form-label">Confirmar Contraseña</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock"></i></span>
                        <InputText id="confirmarClave" @bind-Value="modelo.ConfirmarClave" class="form-control" type="password" />
                    </div>
                </div>

                <div class="d-grid">
                    <button class="btn btn-primary" type="submit">
                        <i class="bi bi-check-circle me-1"></i> Cambiar Contraseña
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private CambiarClaveDto modelo = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            modelo.CorreoUsuario = user.Identity.Name!;
        }
    }

    private async Task Cambiar()
    {
        if (modelo.NuevaClave != modelo.ConfirmarClave)
        {
            await JS.InvokeVoidAsync("alert", "Las contraseñas no coinciden.");
            return;
        }

        var resultado = await ApiService.CambiarClaveAsync(modelo);
        if (resultado.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Contraseña actualizada.");
            Navigation.NavigateTo("/home", forceLoad: true);
        }
        else
        {
            var error = await resultado.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Error: {error}");
        }
    }
}
