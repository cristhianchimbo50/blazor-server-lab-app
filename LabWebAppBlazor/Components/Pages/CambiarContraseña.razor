@page "/cambiar-contraseña"

@rendermode InteractiveServer

@using LabWebAppBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Cambiar Contraseña</h3>

<EditForm Model="@modelo" OnValidSubmit="Cambiar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nueva Contraseña</label>
        <InputText @bind-Value="modelo.NuevaClave" class="form-control" type="password" />
    </div>
    <div class="mb-3">
        <label>Confirmar Contraseña</label>
        <InputText @bind-Value="modelo.ConfirmarClave" class="form-control" type="password" />
    </div>

    <button class="btn btn-primary" type="submit">Cambiar</button>
</EditForm>

@code {
    private CambiarClaveDto modelo = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            modelo.CorreoUsuario = user.Identity.Name!;
        }
    }

    private async Task Cambiar()
    {
        if (modelo.NuevaClave != modelo.ConfirmarClave)
        {
            await JS.InvokeVoidAsync("alert", "Las contraseñas no coinciden.");
            return;
        }

        var resultado = await ApiService.CambiarClaveAsync(modelo);
        if (resultado.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Contraseña actualizada.");
            Navigation.NavigateTo("/pacientes", forceLoad: true);
        }
        else
        {
            var error = await resultado.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Error: {error}");
        }
    }
}
