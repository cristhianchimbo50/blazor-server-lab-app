@page "/egreso-stock"
@rendermode InteractiveServer
@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@inject IApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3 class="mb-3">Egreso de Reactivos</h3>

<div class="mb-3">
    <label>Fecha de Egreso</label>
    <InputDate class="form-control" @bind-Value="fechaEgreso" />
</div>

<div class="row">
    <div class="col-md-6">
        <h5>Reactivos disponibles</h5>
        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
            <table class="table table-bordered table-sm table-hover">
                <thead class="table-light text-center">
                    <tr>
                        <th>Nombre</th>
                        <th>Fabricante</th>
                        <th>Unidad</th>
                        <th>Stock</th>
                        <th>Seleccionado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in todosReactivos)
                    {
                        <tr @ondblclick="() => SeleccionarReactivo(r)">
                            <td>@r.NombreReactivo</td>
                            <td>@r.Fabricante</td>
                            <td>@r.Unidad</td>
                            <td class="text-end">@r.CantidadDisponible.ToString("N2")</td>
                            <td class="text-center">
                                @(reactivosSeleccionados.Any(x => x.IdReactivo == r.IdReactivo)
                                                            ? "<i class='bi bi-check-lg text-primary'></i>" : "")
                        </td>
                    </tr>
                                        }
                </tbody>
            </table>
        </div>
    </div>

    <div class="col-md-6">
        <h5>Reactivos seleccionados para egreso</h5>
        <div class="table-responsive">
            <table class="table table-bordered table-sm">
                <thead class="table-light text-center">
                    <tr>
                        <th>Nombre</th>
                        <th>Cantidad</th>
                        <th>Observación</th>
                        <th>Unidad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in reactivosSeleccionados)
                    {
                        <tr>
                            <td>@r.NombreReactivo</td>
                            <td>
                                <InputNumber class="form-control form-control-sm"
                                             @bind-Value="r.Cantidad"
                                             Min="0.01" Step="0.01" />
                            </td>
                            <td>
                                <InputText class="form-control form-control-sm"
                                           @bind-Value="r.Observacion" />
                            </td>
                            <td>@r.Unidad</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => QuitarReactivo(r.IdReactivo)">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="mt-4">
    <button class="btn btn-danger" @onclick="GuardarEgresosAsync" disabled="@(!reactivosSeleccionados.Any())">
        <i class="bi bi-save me-1"></i> Guardar Egresos
    </button>
</div>

@code {
    private List<ReactivoDto> todosReactivos = new();
    private List<MovimientoReactivoDto> reactivosSeleccionados = new();
    private DateTime fechaEgreso = DateTime.Now;
    private bool datosCargados = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !datosCargados)
        {
            datosCargados = true;
            var lista = await ApiService.GetReactivosAsync();
            todosReactivos = lista.OrderBy(r => r.NombreReactivo).ToList();
            StateHasChanged();
        }
    }

    private void SeleccionarReactivo(ReactivoDto reactivo)
    {
        if (!reactivosSeleccionados.Any(r => r.IdReactivo == reactivo.IdReactivo))
        {
            reactivosSeleccionados.Add(new MovimientoReactivoDto
            {
                IdReactivo = reactivo.IdReactivo,
                NombreReactivo = reactivo.NombreReactivo,
                Unidad = reactivo.Unidad,
                Cantidad = 0,
                FechaMovimiento = fechaEgreso
            });
        }
    }

    private void QuitarReactivo(int id)
    {
        var reactivo = reactivosSeleccionados.FirstOrDefault(r => r.IdReactivo == id);
        if (reactivo is not null)
            reactivosSeleccionados.Remove(reactivo);
    }

    private async Task GuardarEgresosAsync()
    {
        if (reactivosSeleccionados.Any(r => r.Cantidad <= 0 || string.IsNullOrWhiteSpace(r.Observacion)))
        {
            await JS.InvokeVoidAsync("alert", "Debe ingresar una cantidad válida y una observación para cada reactivo.");
            return;
        }

        foreach (var mov in reactivosSeleccionados)
        {
            mov.TipoMovimiento = "EGRESO";
            mov.FechaMovimiento = fechaEgreso;
        }

        var result = await ApiService.RegistrarMovimientosAsync(reactivosSeleccionados);

        if (result.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Egreso registrado correctamente.");
            reactivosSeleccionados.Clear();
            var lista = await ApiService.GetReactivosAsync();
            todosReactivos = lista.OrderBy(r => r.NombreReactivo).ToList();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al guardar los egresos.");
        }
    }
}
