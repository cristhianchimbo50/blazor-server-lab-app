@page "/examenes"
@rendermode InteractiveServer
<PageTitle>Gestión de Exámenes</PageTitle>

@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@inject IApiService ApiService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

    <h3 class="mb-4 d-flex align-items-center">
        <i class="bi bi-clipboard2-pulse-fill me-2 text-primary fs-4"></i> Gestión de Exámenes
    </h3>


    @if (!isRendered)
    {
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando...</strong>
    </div>

    }
    else if (!showContent)
    {
        <div class="alert alert-danger text-center">
            <i class="bi bi-shield-lock-fill me-2"></i> No autorizado para ver esta página.
        </div>
    }
    else
    {
        <div class="card mb-3 shadow-sm">
            <div class="card-body row g-3">
                <div class="col-md-4 col-sm-6">
                    <label class="form-label">Buscar por</label>
                    <InputSelect class="form-select" @bind-Value="criterioBusqueda">
                        <option value="">-- Seleccione --</option>
                        <option value="nombre">Nombre</option>
                        <option value="estudio">Estudio</option>
                        <option value="tecnica">Técnica</option>
                        <option value="tipo">Tipo Examen</option>
                    </InputSelect>
                </div>
                <div class="col-md-5 col-sm-6">
                    <label class="form-label">Valor</label>
                    <InputText class="form-control" @bind-Value="valorBusqueda" />
                </div>
            <div class="col-md-3 col-12 d-flex align-items-end gap-2 flex-wrap">
                <button class="btn btn-primary" @onclick="BuscarExamenes" title="Buscar">
                    <i class="bi bi-search"></i>
                </button>
                @if (EsAdmin)
                {
                    <button class="btn btn-success" @onclick="AbrirModalNuevoExamen" title="Registrar Nuevo Examen">
                        <i class="bi bi-plus-circle"></i>
                    </button>
                }
            </div>

            </div>
        </div>


        <div class="table-responsive">
            @if (ListaExamenes == null || ListaExamenes.Count == 0)
            {
                <div class="alert alert-warning text-center">
                    <i class="bi bi-exclamation-circle me-2"></i> No se encontraron exámenes.
                </div>
            }
            else
            {

            <div class="d-flex justify-content-between align-items-center mb-2">
                <span>
                    Mostrando @((ListaExamenes.Count == 0) ? 0 : ((CurrentPage - 1) * PageSize + 1))
                    - @((CurrentPage - 1) * PageSize + PaginatedExamenes.Count()) de @ListaExamenes.Count
                </span>

                <div class="d-flex align-items-center gap-2">
                    <select class="form-select form-select-sm" style="width: auto;" @bind="PageSize">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="75">75</option>
                    </select>
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => CambiarPagina(CurrentPage - 1)">«</button>
                            </li>
                            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => CambiarPagina(CurrentPage + 1)">»</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>

            <div class="table-responsive shadow-sm" style="max-height: 500px; min-height: 300px; overflow-y: auto;">
                    <table class="table table-hover table-bordered align-middle text-center">

                        <thead class="table-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Estudio</th>
                                <th>Tipo</th>
                                <th>Técnica</th>
                                <th>Precio</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var examen in PaginatedExamenes)
                            {
                                <tr>
                                    <td class="text-start">@examen.NombreExamen</td>
                                    <td>@examen.Estudio</td>
                                    <td>@examen.TipoExamen</td>
                                    <td>@examen.Tecnica</td>
                                    <td>@(examen.Precio?.ToString("C") ?? "-")</td>
                                    <td>
                                        @if (EsAdmin)
                                        {
                                            <div class="d-flex justify-content-center gap-2">
                                                <button class="btn btn-warning btn-sm shadow-sm" title="Editar" @onclick="() => EditarExamen(examen.IdExamen)">
                                                    <i class="bi bi-pencil-square text-dark"></i>
                                                </button>
                                                <button class="btn btn-danger btn-sm shadow-sm" title="Anular" @onclick="() => AnularExamen(examen.IdExamen)">
                                                    <i class="bi bi-x-circle-fill"></i>
                                                </button>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                       

                    </table>
                </div>

            }
        </div>

        @* Modal Ingreso *@
        @if (MostrarModal)
        {
            <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <EditForm Model="Formulario.Examen" OnValidSubmit="GuardarExamen">
                            <DataAnnotationsValidator />
                            <div class="modal-header">
                                <h5 class="modal-title">Nuevo Examen</h5>
                                <button type="button" class="btn-close" @onclick="CerrarModal" />
                            </div>
                            <div class="modal-body">
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        <label>Nombre</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.NombreExamen" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Estudio</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.Estudio" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Tipo Examen</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.TipoExamen" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Técnica</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.Tecnica" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Unidad</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.Unidad" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Valor Referencia</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.ValorReferencia" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Tipo Muestra</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.TipoMuestra" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Tiempo Entrega</label>
                                        <InputText class="form-control" @bind-Value="Formulario.Examen.TiempoEntrega" />
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label>Precio</label>
                                        <InputNumber class="form-control" @bind-Value="Formulario.Examen.Precio" />
                                    </div>
                                </div>
                                
                                <hr />
                                <h5>Exámenes incluidos</h5>
                                 <button type="button" class="btn btn-secondary" @onclick="AbrirModalBusquedaHijo">
                                    <i class="fas fa-search-plus me-1"></i> Agregar Examen incluido
                                </button>
                                <hr />
                                <table class="table table-sm table-bordered">
                                   
                                    <thead>
                                        <tr><th>Nombre</th><th>Estudio</th><th></th></tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var hijo in HijosSeleccionados)
                                        {
                                            <tr>
                                                <td>@hijo.NombreExamen</td>
                                                <td>@hijo.Estudio</td>
                                                <td>
                                                    <button class="btn btn-sm btn-danger" @onclick="() => QuitarHijo(hijo.IdExamen)">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                
                            </div>

                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Guardar</button>
                                <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            </div>
                            
                        </EditForm>
                    </div>
                </div>
            </div>
        }

        @* Modal Búsqueda Hijos *@
        @if (MostrarModalBusqueda)
        {
            <div class="modal show d-block" style="background-color: rgba(0,0,0,0.4);">
                <div class="modal-dialog modal-md">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Buscar Examen Hijo</h5>
                            <button class="btn-close" @onclick="CerrarModalBusqueda" />
                        </div>
                        <div class="modal-body">
                            <div class="row mb-2">
                                <div class="col-5">
                                    <InputSelect class="form-control" @bind-Value="filtroBusquedaHijo">
                                        <option value="nombre">Nombre</option>
                                        <option value="estudio">Estudio</option>
                                    </InputSelect>
                                </div>
                                <div class="col-7">
                                    <InputText class="form-control" @bind-Value="valorBusquedaHijo" />
                                </div>
                            </div>
                            <button class="btn btn-sm btn-primary mb-2" @onclick="BuscarHijos">
                                <i class="fas fa-search"></i> Buscar
                            </button>

                            <div class="table-responsive">
                                <table class="table table-sm table-hover">
                                    <thead><tr><th>Nombre</th><th>Estudio</th></tr></thead>
                                    <tbody>
                                        @foreach (var hijo in ResultadosBusquedaHijos)
                                        {
                                            <tr @ondblclick="() => SeleccionarHijo(hijo)">
                                                <td>@hijo.NombreExamen</td>
                                                <td>@hijo.Estudio</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }


@code {
    private List<ExamenDto> ListaExamenes = new();
    private string criterioBusqueda = "", valorBusqueda = "";
    private bool isRendered = false, showContent = false;

    private bool MostrarModal = false;
    private bool MostrarModalBusqueda = false;

    private ExamenConComposicionDto Formulario = new();
    private List<ExamenDto> HijosSeleccionados = new();

    private string filtroBusquedaHijo = "nombre";
    private string valorBusquedaHijo = "";
    private List<ExamenDto> ResultadosBusquedaHijos = new();

    private ClaimsPrincipal? user;
    private bool EsAdmin => user?.IsInRole("administrador") ?? false;
    private bool EsRecepcionista => user?.IsInRole("recepcionista") ?? false;
    private bool EsLaboratorista => user?.IsInRole("laboratorista") ?? false;

    private int _pageSize = 25;
    private int PageSize
    {
        get => _pageSize;
        set
        {
            if (_pageSize != value)
            {
                _pageSize = value;
                CurrentPage = 1;
            }
        }
    }

    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling(ListaExamenes.Count / (double)PageSize);
    private IEnumerable<ExamenDto> PaginatedExamenes => ListaExamenes
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var auth = await AuthProvider.GetAuthenticationStateAsync();
            user = auth.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                // Redirección al login con returnUrl
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", true);
                return;
            }

            isRendered = true;
            showContent = true;
            await CargarExamenes();
            StateHasChanged();
        }
    }


    private async Task CargarExamenes()
    {
        ListaExamenes = (await ApiService.GetExamenesAsync()).ToList();
        CurrentPage = 1;
    }

    private async Task BuscarExamenes()
    {
        var todos = await ApiService.GetExamenesAsync();

        if (string.IsNullOrWhiteSpace(criterioBusqueda) || string.IsNullOrWhiteSpace(valorBusqueda))
        {
            ListaExamenes = todos.ToList();
        }
        else
        {
            var val = valorBusqueda.ToLower();
            ListaExamenes = criterioBusqueda switch
            {
                "nombre" => todos.Where(e => e.NombreExamen.ToLower().Contains(val)).ToList(),
                "estudio" => todos.Where(e => e.Estudio?.ToLower().Contains(val) ?? false).ToList(),
                "tecnica" => todos.Where(e => e.Tecnica?.ToLower().Contains(val) ?? false).ToList(),
                "tipo" => todos.Where(e => e.TipoExamen?.ToLower().Contains(val) ?? false).ToList(),
                _ => todos.ToList()
            };
        }

        CurrentPage = 1; // Mueve esta línea fuera del if
    }


    private void AbrirModalNuevoExamen()
    {
        Formulario = new();
        HijosSeleccionados = new();
        MostrarModal = true;
    }

    private void CerrarModal() => MostrarModal = false;
    private void CerrarModalBusqueda() => MostrarModalBusqueda = false;

    private async Task GuardarExamen()
    {
        Formulario.IdExamenesHijos = HijosSeleccionados.Select(h => h.IdExamen).Distinct().ToList();

        HttpResponseMessage response;

        if (Formulario.Examen.IdExamen == 0)
        {
            response = await ApiService.CrearExamenConHijosAsync(Formulario);
        }
        else
        {
            var idPadre = Formulario.Examen.IdExamen;
            response = await ApiService.EditarExamenAsync(idPadre, Formulario.Examen);

            var hijosPrevios = await ApiService.ObtenerHijosDeExamenAsync(idPadre);
            foreach (var hijo in hijosPrevios)
                await ApiService.EliminarExamenHijoAsync(idPadre, hijo.IdExamen);

            foreach (var idHijo in Formulario.IdExamenesHijos)
                await ApiService.AgregarExamenHijoAsync(idPadre, idHijo);
        }

        if (response.IsSuccessStatusCode)
        {
            MostrarModal = false;
            await CargarExamenes();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al guardar examen.");
        }
    }

    private async Task AnularExamen(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "¿Deseas anular este examen?"))
        {
            await ApiService.AnularExamenAsync(id);
            await CargarExamenes();
        }
    }

    private void QuitarHijo(int id) =>
        HijosSeleccionados = HijosSeleccionados.Where(e => e.IdExamen != id).ToList();

    private void AbrirModalBusquedaHijo()
    {
        valorBusquedaHijo = "";
        ResultadosBusquedaHijos = new();
        MostrarModalBusqueda = true;
    }

    private async Task BuscarHijos()
    {
        var todos = await ApiService.GetExamenesAsync();
        var val = valorBusquedaHijo.ToLower();
        ResultadosBusquedaHijos = filtroBusquedaHijo switch
        {
            "nombre" => todos.Where(e => e.NombreExamen.ToLower().Contains(val)).ToList(),
            "estudio" => todos.Where(e => e.Estudio?.ToLower().Contains(val) ?? false).ToList(),
            _ => []
        };
    }

    private void SeleccionarHijo(ExamenDto examen)
    {
        if (!HijosSeleccionados.Any(x => x.IdExamen == examen.IdExamen))
            HijosSeleccionados.Add(examen);

        MostrarModalBusqueda = false;
    }

    private async Task EditarExamen(int id)
    {
        var examen = await ApiService.GetExamenByIdAsync(id);
        if (examen is null)
        {
            await JS.InvokeVoidAsync("alert", "Examen no encontrado.");
            return;
        }

        var hijos = await ApiService.ObtenerHijosDeExamenAsync(id);
        Formulario = new ExamenConComposicionDto
        {
            Examen = examen,
            IdExamenesHijos = hijos.Select(h => h.IdExamen).ToList()
        };
        HijosSeleccionados = hijos.ToList();
        MostrarModal = true;
    }

    private void IrAVinculoReactivos()
    {
        Navigation.NavigateTo("/examenes-reactivos");
    }

    private void CambiarPagina(int pagina)
    {
        if (pagina < 1 || pagina > TotalPages)
            return;

        CurrentPage = pagina;
        StateHasChanged();
    }


    private void CambioTamañoPagina(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int size))
            PageSize = size;

        CurrentPage = 1;
    }

}
