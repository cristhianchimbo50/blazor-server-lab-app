@page "/ordenes/nuevo"
@rendermode InteractiveServer
@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims
@inject IApiService ApiService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="container-fluid px-3">
    <h4 class="mb-4 d-flex align-items-center">
        <i class="fas fa-file-medical text-primary fs-4 me-2"></i> Registrar Nueva Orden de Laboratorio
    </h4>
</div>



@if (!yaRenderizado)
{
    <p>Cargando interfaz...</p>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Fecha de la Orden</label>
                    <InputDate class="form-control" @bind-Value="FechaOrdenSeleccionada" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Cédula del Paciente</label>
                    <div class="input-group">
                        <InputText class="form-control" @bind-Value="Cedula" @onkeydown="BuscarConEnter" />
                        <button class="btn btn-outline-info" @onclick="BuscarPorCedula">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>

            @if (PacienteActual is not null)
            {
                <hr />
                <div class="row g-3 mt-2">
                    <div class="col-md-3">
                        <label class="form-label">Nombre</label>
                        <input class="form-control" value="@PacienteActual.NombrePaciente" disabled />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Edad</label>
                        <input class="form-control" value="@PacienteActual.EdadPaciente" disabled />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Dirección</label>
                        <input class="form-control" value="@PacienteActual.DireccionPaciente" disabled />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Teléfono</label>
                        <input class="form-control" value="@PacienteActual.TelefonoPaciente" disabled />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Correo</label>
                        <input class="form-control" value="@PacienteActual.CorreoElectronicoPaciente" disabled />
                    </div>
                </div>
            }
        </div>
    </div>


    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <label class="form-label">Médico</label>
            <div class="input-group">
                <select class="form-select" @bind="MedicoIdSeleccionado">
                    <option value="">-- Seleccione un médico --</option>
                    @foreach (var medico in Medicos)
                    {
                        <option value="@medico.IdMedico">@medico.NombreMedico</option>
                    }
                </select>
                <button class="btn btn-outline-secondary" type="button" @onclick="AbrirModalNuevoMedico">
                    <i class="fas fa-user-md"></i> Nuevo
                </button>
            </div>
        </div>
    </div>


    <div class="mb-3">
        <button class="btn btn-outline-success" @onclick="() => MostrarModalExamen = true">
            <i class="fas fa-vial me-1"></i> Agregar Examen
        </button>
    </div>


    @if (ExamenesSeleccionados.Any())
    {
        <div class="card shadow-sm mb-4">
            <div class="card-body table-responsive">
                <table class="table table-striped table-bordered table-sm align-middle text-center">
                    <thead class="table-light">
                        <tr>
                            <th>Nombre</th>
                            <th>Estudio</th>
                            <th>Precio</th>
                            <th>Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ex in ExamenesSeleccionados)
                        {
                            <tr>
                                <td>@ex.NombreExamen</td>
                                <td>@ex.Estudio</td>
                                <td>@ex.Precio?.ToString("C")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" title="Quitar" @onclick="() => QuitarExamen(ex)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }


    <!-- GUARDAR -->
    <div class="text-end mb-4">
        <button class="btn btn-success px-4" @onclick="MostrarPagoModal">
            <i class="fas fa-save me-1"></i> Guardar Orden
        </button>
    </div>
}

<!-- MODAL NUEVO MÉDICO -->
@if (MostrarModalMedico)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="@NuevoMedico" OnValidSubmit="GuardarNuevoMedico">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-user-md me-2"></i> Registrar Nuevo Médico
                        </h5>
                        <button class="btn-close" @onclick="CerrarModalNuevoMedico"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-2">
                            <label><i class="fas fa-user me-1"></i> Nombre</label>
                            <InputText class="form-control" @bind-Value="NuevoMedico.NombreMedico" />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-stethoscope me-1"></i> Especialidad</label>
                            <InputText class="form-control" @bind-Value="NuevoMedico.Especialidad" />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-phone me-1"></i> Teléfono</label>
                            <InputText class="form-control" @bind-Value="NuevoMedico.Telefono" />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-envelope me-1"></i> Correo</label>
                            <InputText class="form-control" @bind-Value="NuevoMedico.Correo" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" type="submit">Guardar</button>
                        <button class="btn btn-secondary" type="button" @onclick="CerrarModalNuevoMedico">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- MODAL EXÁMENES -->
@if (MostrarModalExamen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-vials me-2"></i> Buscar y Seleccionar Examen
                    </h5>
                    <button class="btn-close" @onclick="CerrarModalExamen"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-2">
                        <div class="col-md-9">
                            <InputText class="form-control" @bind-Value="TextoBuscarExamen" placeholder="Buscar por nombre o estudio" />
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-primary w-100" @onclick="BuscarExamenes">
                                <i class="fas fa-search me-1"></i> Buscar
                            </button>
                        </div>
                    </div>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Estudio</th>
                                <th>Precio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ex in ExamenesDisponibles)
                            {
                                <tr @ondblclick="() => SeleccionarExamen(ex)">
                                    <td>@ex.NombreExamen</td>
                                    <td>@ex.Estudio</td>
                                    <td>@ex.Precio?.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

<!-- MODAL PAGO -->
@if (MostrarPago)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="Pago" OnValidSubmit="GuardarOrden">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-cash-register me-2"></i> Registrar Pago de la Orden
                        </h5>
                        <button class="btn-close" @onclick="CerrarPagoModal"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="mb-2">
                            <label>Total</label>
                            <input class="form-control" value="@CalcularTotal().ToString("C")" disabled />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-dollar-sign me-1"></i> Efectivo</label>
                            <InputNumber class="form-control" @bind-Value="Pago.DineroEfectivo" />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-university me-1"></i> Transferencia</label>
                            <InputNumber class="form-control" @bind-Value="Pago.Transferencia" />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-wallet me-1"></i> Pagado</label>
                            <input class="form-control" value="@Pagado.ToString("C")" disabled />
                        </div>
                        <div class="mb-2">
                            <label>Saldo</label>
                            <input class="form-control" value="@Saldo.ToString("C")" disabled />
                        </div>
                        <div class="mb-2">
                            <label><i class="fas fa-hand-holding-usd me-1"></i> Cambio</label>
                            <input class="form-control" value="@Cambio.ToString("C")" disabled />
                        </div>
                        <div class="mb-2">
                            <label>Observaciones</label>
                            <InputTextArea class="form-control" @bind-Value="Pago.Observacion" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-success" type="submit">
                            <i class="fas fa-check-circle me-1"></i> Confirmar
                        </button>
                        <button class="btn btn-secondary" @onclick="CerrarPagoModal">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-search me-2"></i> Buscar Paciente
                    </h5>
                    <button class="btn-close" @onclick="() => mostrarModalBusqueda = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label>Cédula</label>
                            <InputText class="form-control" @bind-Value="filtroCedula" />
                        </div>
                        <div class="col-md-6">
                            <label>Nombre</label>
                            <InputText class="form-control" @bind-Value="filtroNombre" />
                        </div>
                    </div>
                    <button class="btn btn-outline-primary mb-2" @onclick="BuscarPacientesModal">
                        <i class="fas fa-search me-1"></i> Buscar
                    </button>

                    @if (ResultadosBusqueda.Any())
                    {
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Cédula</th>
                                    <th>Nombre</th>
                                    <th>Edad</th>
                                    <th>Teléfono</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var paciente in ResultadosBusqueda)
                                {
                                    <tr @ondblclick="() => SeleccionarPaciente(paciente)">
                                        <td>@paciente.CedulaPaciente</td>
                                        <td>@paciente.NombrePaciente</td>
                                        <td>@paciente.EdadPaciente</td>
                                        <td>@paciente.TelefonoPaciente</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No hay resultados.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalPaciente)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="@NuevoPaciente" OnValidSubmit="GuardarNuevoPaciente">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-user-plus me-2"></i> Registrar Nuevo Paciente
                        </h5>
                        <button class="btn-close" @onclick="() => mostrarModalPaciente = false"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-2"><label><i class="fas fa-user me-1"></i> Nombre</label>
                            <InputText class="form-control" @bind-Value="NuevoPaciente.NombrePaciente" /></div>
                        <div class="mb-2">
                            <label><i class="fas fa-map-marker-alt me-1"></i> Dirección</label>
                            <InputDate class="form-control" @bind-Value="NuevoPaciente.FechaNacPaciente" /></div>
                        <div class="mb-2"><label>Dirección</label>
                            <InputText class="form-control" @bind-Value="NuevoPaciente.DireccionPaciente" /></div>
                        <div class="mb-2">
                            <label><i class="fas fa-envelope me-1"></i> Correo</label>
                            <InputText class="form-control" @bind-Value="NuevoPaciente.CorreoElectronicoPaciente" /></div>
                        <div class="mb-2">
                            <label><i class="fas fa-phone me-1"></i> Teléfono</label>
                            <InputText class="form-control" @bind-Value="NuevoPaciente.TelefonoPaciente" /></div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" type="submit">Guardar</button>
                        <button class="btn btn-secondary" type="button" @onclick="() => mostrarModalPaciente = false">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (!ExamenesSeleccionados.Any())
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-circle me-2"></i> No hay exámenes seleccionados.
    </div>
}



@code {
    private bool yaRenderizado = false;

    // Paciente
    private string Cedula = "";
    private PacienteDto? PacienteActual;

    private bool mostrarModalPaciente = false;
    private bool mostrarConfirmacion = false;
    private PacienteDto NuevoPaciente = new();


    // Médico
    private string MedicoNombreInput = "";
    private List<MedicoDto> Medicos = new();
    private MedicoDto? MedicoActual;
    private MedicoDto NuevoMedico = new();
    private bool MostrarModalMedico = false;

    // Exámenes
    private bool MostrarModalExamen = false;
    private string TextoBuscarExamen = "";
    private List<ExamenDto> ExamenesDisponibles = new();
    private List<ExamenDto> ExamenesSeleccionados = new();

    // Pago
    private bool MostrarPago = false;
    private PagoDto Pago = new();

    // Usuario
    private ClaimsPrincipal? usuario;


    private bool disposed = false;

    public void Dispose()
    {
        disposed = true;
    }

    private DateOnly FechaOrdenSeleccionada = DateOnly.FromDateTime(DateTime.Now);

    private bool medicosCargados = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            yaRenderizado = true;

            if (!medicosCargados)
            {
                Medicos = (await ApiService.GetMedicosAsync()).ToList();
                var auth = await AuthProvider.GetAuthenticationStateAsync();
                usuario = auth.User;

                medicosCargados = true;
            }


            await InvokeAsync(StateHasChanged);
        }
    }



    private async Task BuscarPorCedula()
    {
        if (string.IsNullOrWhiteSpace(Cedula))
        {
            filtroCedula = "";
            filtroNombre = "";
            ResultadosBusqueda.Clear();
            mostrarModalBusqueda = true;
            return;
        }

        if (!ValidarCedula(Cedula))
        {
            await JS.InvokeVoidAsync("alert", "La cédula ingresada no es válida. Verifique que tenga 10 dígitos y sea correcta.");
            return;
        }


        var paciente = await ApiService.ObtenerPacientePorCedulaAsync(Cedula);
        if (paciente == null)
        {
            var confirm = await JS.InvokeAsync<bool>("confirm", $"Paciente con cédula {Cedula} no encontrado. ¿Deseas registrarlo?");
            if (confirm)
            {
                NuevoPaciente = new PacienteDto { CedulaPaciente = Cedula };
                mostrarModalPaciente = true;
            }
        }
        else if (paciente.Anulado == true)
        {
            var confirmarReactivar = await JS.InvokeAsync<bool>("confirm", $"El paciente con cédula {Cedula} se encuentra anulado.\n\n¿Desea reactivarlo para registrar una nueva orden?");
            if (confirmarReactivar)
            {
                paciente.Anulado = false;
                paciente.FechaRegistro = DateTime.Now;
                paciente.EdadPaciente = CalcularEdad(paciente.FechaNacPaciente);

                var resultado = await ApiService.EditarPacienteAsync(paciente.IdPaciente, paciente);
                if (resultado.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("alert", "Paciente reactivado correctamente.");
                    PacienteActual = paciente;
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Error al reactivar paciente: {resultado.StatusCode}");
                }
            }
        }
        else
        {
            PacienteActual = paciente;
        }
    }


    private async Task BuscarConEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await BuscarPorCedula();
    }

    private async Task DetectarEnterMedico(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var existe = Medicos.FirstOrDefault(m =>
                m.NombreMedico.Equals(MedicoNombreInput.Trim(), StringComparison.OrdinalIgnoreCase));

            if (existe != null)
            {
                MedicoActual = existe;
            }
            else
            {
                NuevoMedico = new MedicoDto { NombreMedico = MedicoNombreInput.Trim() };
                MostrarModalMedico = true;
            }
        }
    }

    private void AbrirModalNuevoMedico()
    {
        NuevoMedico = new MedicoDto { NombreMedico = MedicoNombreInput.Trim() };
        MostrarModalMedico = true;
    }


    private async Task GuardarNuevoMedico()
    {
        var res = await ApiService.CrearMedicoAsync(NuevoMedico);
        if (res.IsSuccessStatusCode)
        {
            Medicos = (await ApiService.GetMedicosAsync()).ToList();
            MedicoActual = Medicos.FirstOrDefault(m => m.NombreMedico == NuevoMedico.NombreMedico);
            MedicoNombreInput = MedicoActual?.NombreMedico ?? "";
            MostrarModalMedico = false;
        }
    }

    private void CerrarModalNuevoMedico() => MostrarModalMedico = false;

    private async Task BuscarExamenes()
    {
        if (disposed) return;

        var todos = (await ApiService.GetExamenesAsync()).ToList();

        if (disposed) return;

        ExamenesDisponibles = todos
            .Where(ex =>
                (ex.NombreExamen != null && ex.NombreExamen.Contains(TextoBuscarExamen, StringComparison.OrdinalIgnoreCase)) ||
                (ex.Estudio != null && ex.Estudio.Contains(TextoBuscarExamen, StringComparison.OrdinalIgnoreCase)))
            .ToList();

        await InvokeAsync(StateHasChanged);
    }



    private void SeleccionarExamen(ExamenDto examen)
    {
        if (!ExamenesSeleccionados.Any(e => e.IdExamen == examen.IdExamen))
            ExamenesSeleccionados.Add(examen);
        MostrarModalExamen = false;
    }

    private void QuitarExamen(ExamenDto examen)
    {
        ExamenesSeleccionados.Remove(examen);
    }

    private decimal CalcularTotal() => ExamenesSeleccionados.Sum(e => e.Precio ?? 0);
    private decimal Pagado => Pago.DineroEfectivo + Pago.Transferencia;
    private decimal Saldo => CalcularTotal() > Pagado ? CalcularTotal() - Pagado : 0;
    private decimal Cambio => Pagado > CalcularTotal() ? Pagado - CalcularTotal() : 0;

    private void MostrarPagoModal()
    {
        if (PacienteActual == null || MedicoActual == null || !ExamenesSeleccionados.Any())
            return;

        MostrarPago = true;
    }


    private void CerrarPagoModal() => MostrarPago = false;
    private void CerrarModalExamen() => MostrarModalExamen = false;

    private async Task GuardarOrden()
    {
        if (PacienteActual == null)
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar un paciente antes de registrar la orden.");
            return;
        }

        if (MedicoActual == null)
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar un médico antes de registrar la orden.");
            return;
        }

        if (!ExamenesSeleccionados.Any())
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar al menos un examen para continuar.");
            return;
        }


        // Verificar que el usuario tenga el claim necesario
        var idClaim = usuario?.FindFirst(ClaimTypes.NameIdentifier);
        if (idClaim == null || string.IsNullOrWhiteSpace(idClaim.Value))
        {
            await JS.InvokeVoidAsync("alert", "No se pudo obtener el ID del usuario autenticado.");
            return;
        }


        int idUsuario = int.Parse(idClaim.Value);

        var dto = new OrdenCompletaDto
            {
                Orden = new OrdenDto
                {
                    IdPaciente = PacienteActual.IdPaciente,
                    IdMedico = MedicoActual.IdMedico,
                    IdUsuario = idUsuario,
                    Observacion = Pago.Observacion,
                    FechaOrden = FechaOrdenSeleccionada
                },
                IdsExamenes = ExamenesSeleccionados.Select(e => e.IdExamen).ToList(),
                DineroEfectivo = Pago.DineroEfectivo,
                Transferencia = Pago.Transferencia,
                Observaciones = Pago.Observacion
            };


        var res = await ApiService.RegistrarOrdenCompletaAsync(dto);
        if (res.IsSuccessStatusCode)
        {
            var data = await res.Content.ReadFromJsonAsync<OrdenRespuestaDto>();
            await JS.InvokeVoidAsync("alert", $"Orden registrada: {data?.NumeroOrden}");
            Navigation.NavigateTo("/ordenes");
        }
        else
        {
            var errorContent = await res.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", "Error al registrar orden:\n" + errorContent);
        }


    }

    private int? MedicoIdSeleccionado
    {
        get => MedicoActual?.IdMedico;
        set => MedicoActual = Medicos.FirstOrDefault(m => m.IdMedico == value);
    }

    private bool MostrarModalBuscarPaciente = false;
    private string TextoBuscarPaciente = "";
    private List<PacienteDto> ListaPacientes = new();

    private void AbrirModalBuscarPaciente()
    {
        TextoBuscarPaciente = "";
        ListaPacientes = new();
        MostrarModalBuscarPaciente = true;
    }

    private void CerrarModalBuscarPaciente() => MostrarModalBuscarPaciente = false;

    private async Task BuscarPacientes(ChangeEventArgs e)
    {
        ListaPacientes = (await ApiService.BuscarPacientesAsync("cedula", TextoBuscarPaciente)).ToList();
    }

    private void SeleccionarPaciente(PacienteDto paciente)
    {
        PacienteActual = paciente;
        Cedula = paciente.CedulaPaciente;
        mostrarModalBusqueda = false;
        MostrarModalBuscarPaciente = false;
    }


    private bool mostrarModalBusqueda = false;
    private string filtroCedula = "";
    private string filtroNombre = "";
    private List<PacienteDto> ResultadosBusqueda = new();

    private void AbrirModalBusqueda()
    {
        filtroCedula = "";
        filtroNombre = "";
        ResultadosBusqueda = new();
        mostrarModalBusqueda = true;
    }

    private async Task BuscarPacientesModal()
    {
        var resultadosCedula = string.IsNullOrWhiteSpace(filtroCedula)
            ? new List<PacienteDto>()
            : (await ApiService.BuscarPacientesAsync("cedula", filtroCedula)).ToList();

        var resultadosNombre = string.IsNullOrWhiteSpace(filtroNombre)
            ? new List<PacienteDto>()
            : (await ApiService.BuscarPacientesAsync("nombre", filtroNombre)).ToList();

        // Combinar sin duplicar
        ResultadosBusqueda = resultadosCedula
            .Concat(resultadosNombre)
            .GroupBy(p => p.IdPaciente)
            .Select(g => g.First())
            .ToList();
    }

    private int CalcularEdad(DateTime fechaNacimiento)
    {
        var hoy = DateTime.Today;
        var edad = hoy.Year - fechaNacimiento.Year;
        if (fechaNacimiento > hoy.AddYears(-edad)) edad--;
        return edad;
    }

    private bool ValidarCedula(string cedula)
    {
        if (cedula.Length != 10 || !cedula.All(char.IsDigit))
            return false;

        int sum = 0;
        for (int i = 0; i < 9; i++)
        {
            int digit = int.Parse(cedula[i].ToString());
            int coef = (i % 2 == 0) ? 2 : 1;
            int product = digit * coef;
            sum += (product >= 10) ? (product - 9) : product;
        }

        int lastDigit = int.Parse(cedula[9].ToString());
        int calculatedDigit = (sum % 10 == 0) ? 0 : (10 - (sum % 10));

        return lastDigit == calculatedDigit;
    }

    private async Task GuardarNuevoPaciente()
    {
        NuevoPaciente.EdadPaciente = CalcularEdad(NuevoPaciente.FechaNacPaciente);
        NuevoPaciente.FechaRegistro = DateTime.Now;
        NuevoPaciente.Anulado = false;

        var result = await ApiService.CrearPacienteAsync(NuevoPaciente);
        if (result.IsSuccessStatusCode)
        {
            PacienteActual = NuevoPaciente;
            mostrarModalPaciente = false;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al registrar paciente.");
        }
    }
}
