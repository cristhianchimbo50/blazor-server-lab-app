@page "/ordenes/nuevo"
@rendermode InteractiveServer
@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims

@inject IApiService ApiService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider

<h4>Ingreso de Orden</h4>

<div class="mb-3 row">
    <div class="col-md-4">
        <label>Cédula del paciente</label>
        <div class="input-group">
            <InputText class="form-control" @bind-Value="CedulaBusqueda" @onkeydown="BuscarConEnter" />
            <button class="btn btn-outline-primary" type="button" @onclick="BuscarPorCedula">Buscar</button>
        </div>
    </div>
</div>

@if (PacienteActual != null)
{
    <div class="row mb-3">
        <div class="col-md-4">
            <label>Nombre</label>
            <input class="form-control" value="@PacienteActual.NombrePaciente" disabled />
        </div>
        <div class="col-md-2">
            <label>Edad</label>
            <input class="form-control" value="@(PacienteActual.EdadPaciente?.ToString() ?? "")" disabled />
        </div>
        <div class="col-md-6">
            <label>Dirección</label>
            <input class="form-control" value="@PacienteActual.DireccionPaciente" disabled />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-4">
            <label>Correo</label>
            <input class="form-control" value="@PacienteActual.CorreoElectronicoPaciente" disabled />
        </div>
        <div class="col-md-4">
            <label>Teléfono</label>
            <input class="form-control" value="@PacienteActual.TelefonoPaciente" disabled />
        </div>
    </div>
}

@if (mostrarConfirmacion)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Paciente no encontrado</h5>
                </div>
                <div class="modal-body">
                    <p>¿Desea registrar al nuevo paciente con cédula <strong>@CedulaBusqueda</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="AbrirModalRegistro">Sí</button>
                    <button class="btn btn-secondary" @onclick="() => mostrarConfirmacion = false">No</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalPaciente)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="@NuevoPaciente" OnValidSubmit="GuardarNuevoPaciente">
                    <div class="modal-header">
                        <h5 class="modal-title">Registrar nuevo paciente</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalPaciente"></button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-2"><label>Nombre</label><InputText class="form-control" @bind-Value="NuevoPaciente.NombrePaciente" /></div>
                        <div class="mb-2"><label>Fecha de Nacimiento</label><InputDate class="form-control" @bind-Value="NuevoPaciente.FechaNacPaciente" /></div>
                        <div class="mb-2"><label>Dirección</label><InputText class="form-control" @bind-Value="NuevoPaciente.DireccionPaciente" /></div>
                        <div class="mb-2"><label>Correo</label><InputText class="form-control" @bind-Value="NuevoPaciente.CorreoElectronicoPaciente" /></div>
                        <div class="mb-2"><label>Teléfono</label><InputText class="form-control" @bind-Value="NuevoPaciente.TelefonoPaciente" /></div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" type="submit">Guardar</button>
                        <button class="btn btn-secondary" type="button" @onclick="CerrarModalPaciente">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Buscar Paciente</h5>
                    <button class="btn-close" @onclick="() => mostrarModalBusqueda = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label>Cédula</label>
                            <InputText class="form-control" @bind-Value="filtroCedula" />
                        </div>
                        <div class="col-md-6">
                            <label>Nombre</label>
                            <InputText class="form-control" @bind-Value="filtroNombre" />
                        </div>
                    </div>
                    <button class="btn btn-primary mb-2" @onclick="BuscarPacientesModal">Buscar</button>

                    @if (ResultadosBusqueda.Any())
                    {
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Cédula</th>
                                    <th>Nombre</th>
                                    <th>Edad</th>
                                    <th>Teléfono</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var paciente in ResultadosBusqueda)
                                {
                                    <tr @ondblclick="() => SeleccionarPaciente(paciente)">
                                        <td>@paciente.CedulaPaciente</td>
                                        <td>@paciente.NombrePaciente</td>
                                        <td>@paciente.EdadPaciente</td>
                                        <td>@paciente.TelefonoPaciente</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No hay resultados.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string CedulaBusqueda = "";
    private PacienteDto? PacienteActual;
    private PacienteDto NuevoPaciente = new();
    private bool mostrarModalPaciente = false;
    private bool mostrarConfirmacion = false;
    private ClaimsPrincipal? user;
    private bool mostrarModalBusqueda = false;
    private string filtroCedula = "";
    private string filtroNombre = "";
    private List<PacienteDto> ResultadosBusqueda = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task BuscarPorCedula()
    {
        if (string.IsNullOrWhiteSpace(CedulaBusqueda))
        {
            filtroCedula = "";
            filtroNombre = "";
            ResultadosBusqueda.Clear();
            mostrarModalBusqueda = true;
            return;
        }

        if (!ValidarCedula(CedulaBusqueda))
        {
            await JS.InvokeVoidAsync("alert", "Cédula inválida.");
            return;
        }

        var paciente = await ApiService.ObtenerPacientePorCedulaAsync(CedulaBusqueda);
        if (paciente == null)
        {
            var confirm = await JS.InvokeAsync<bool>("confirm", $"Paciente con cédula {CedulaBusqueda} no encontrado. ¿Deseas registrarlo?");
            if (confirm)
            {
                NuevoPaciente = new PacienteDto { CedulaPaciente = CedulaBusqueda };
                mostrarModalPaciente = true;
            }
        }
        else
        {
            PacienteActual = paciente;
        }
    }

    private void AbrirModalRegistro()
    {
        mostrarConfirmacion = false;
        NuevoPaciente = new PacienteDto { CedulaPaciente = CedulaBusqueda };
        mostrarModalPaciente = true;
    }

    private async Task GuardarNuevoPaciente()
    {
        NuevoPaciente.EdadPaciente = CalcularEdad(NuevoPaciente.FechaNacPaciente);
        NuevoPaciente.FechaRegistro = DateTime.Now;
        NuevoPaciente.Anulado = false;

        var result = await ApiService.CrearPacienteAsync(NuevoPaciente);
        if (result.IsSuccessStatusCode)
        {
            PacienteActual = NuevoPaciente;
            mostrarModalPaciente = false;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al registrar paciente.");
        }
    }

    private void CerrarModalPaciente()
    {
        mostrarModalPaciente = false;
    }

    private int CalcularEdad(DateTime fechaNacimiento)
    {
        var hoy = DateTime.Today;
        var edad = hoy.Year - fechaNacimiento.Year;
        if (fechaNacimiento > hoy.AddYears(-edad)) edad--;
        return edad;
    }

    private bool ValidarCedula(string cedula)
    {
        if (cedula.Length != 10 || !cedula.All(char.IsDigit))
            return false;

        int sum = 0;
        for (int i = 0; i < 9; i++)
        {
            int digit = int.Parse(cedula[i].ToString());
            int coef = (i % 2 == 0) ? 2 : 1;
            int product = digit * coef;
            sum += (product >= 10) ? (product - 9) : product;
        }

        int lastDigit = int.Parse(cedula[9].ToString());
        int calculatedDigit = (sum % 10 == 0) ? 0 : (10 - (sum % 10));

        return lastDigit == calculatedDigit;
    }

    private async Task BuscarConEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarPorCedula();
        }
    }

    private async Task BuscarPacientesModal()
    {
        ResultadosBusqueda.Clear();
        if (!string.IsNullOrWhiteSpace(filtroCedula))
        {
            if (!ValidarCedula(filtroCedula))
            {
                await JS.InvokeVoidAsync("alert", "Cédula inválida.");
                return;
            }

            var paciente = await ApiService.ObtenerPacientePorCedulaAsync(filtroCedula);
            if (paciente != null) ResultadosBusqueda.Add(paciente);
        }
        else if (!string.IsNullOrWhiteSpace(filtroNombre))
        {
            var todos = await ApiService.GetPacientesAsync();
            ResultadosBusqueda = todos
                .Where(p => p.NombrePaciente.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void SeleccionarPaciente(PacienteDto paciente)
    {
        PacienteActual = paciente;
        CedulaBusqueda = paciente.CedulaPaciente;
        mostrarModalBusqueda = false;
    }
}
