@page "/resultados/ingresar"
@rendermode InteractiveServer
<PageTitle>Ingreso de Resultados</PageTitle>

@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject NavigationManager navManager

@if (!yaRenderizado)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando interfaz...</strong>
    </div>
}
else if (!showContent)
{
    <div class="alert alert-danger text-center">
        <i class="fas fa-exclamation-triangle me-2"></i>No autorizado para ingresar resultados.
    </div>
}
else if (cargando || DatosOrden == null)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando datos...</strong>
    </div>
}
else
{
    <div class="container mt-4 mb-5">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex align-items-center">
                <i class="fas fa-vial me-2"></i>
                <h5 class="m-0">Ingreso de Resultados</h5>
            </div>
            <div class="card-body">
                <div class="row g-3 mb-4">
                    <div class="col-md-4">
                        <label class="form-label fw-semibold"><i class="fas fa-id-card me-1"></i> Cédula</label>
                        <input class="form-control" value="@DatosOrden.CedulaPaciente" disabled />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-semibold"><i class="fas fa-user me-1"></i> Nombre</label>
                        <input class="form-control" value="@DatosOrden.NombrePaciente" disabled />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-semibold"><i class="fas fa-calendar-alt me-1"></i> Fecha Resultado</label>
                        <InputDate class="form-control" @bind-Value="fechaResultado" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold"><i class="fas fa-user-md me-1"></i> Médico</label>
                        <input class="form-control" value="@DatosOrden.NombreMedico" disabled />
                    </div>
                </div>

                <h6 class="mt-4"><i class="fas fa-microscope me-1"></i> Parámetros del Examen</h6>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered align-middle text-center">
                        <thead class="table-light">
                            <tr>
                                <th>Examen</th>
                                <th>Valor</th>
                                <th>Unidad</th>
                                <th>Referencia</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ex in ExamenesSeleccionados)
                            {
                                <tr>
                                    <td class="text-start">@ex.NombreExamen</td>
                                    <td>
                                        <input type="text" class="form-control text-end"
                                               @bind="ValoresIngresados[ex.IdExamen]" />
                                    </td>
                                    <td>@ex.Unidad</td>
                                    <td>@ex.ValorReferencia</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mb-4">
                    <label class="form-label fw-semibold"><i class="fas fa-clipboard me-1"></i> Observaciones Generales</label>
                    <textarea class="form-control" rows="4" @bind="observacionesGenerales"
                              placeholder="Ingrese observaciones adicionales..."></textarea>
                </div>

                <div class="d-flex justify-content-end btn-group">
                    <button class="btn btn-success" @onclick="GuardarResultados">
                        <i class="fas fa-save me-1"></i> Guardar Resultado
                    </button>
                    <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/ordenes"))">
                        <i class="fas fa-arrow-left me-1"></i> Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int idOrden { get; set; }
    [Parameter] public List<int> idsExamenes { get; set; } = new();

    private OrdenDetalleDto? DatosOrden;
    private List<ExamenDto> ExamenesSeleccionados = new();
    private Dictionary<int, string> ValoresIngresados = new();
    private Dictionary<int, string> ObservacionesIngresadas = new();

    private DateTime fechaResultado = DateTime.Today;
    private string observacionesGenerales = "";

    private ClaimsPrincipal? user;
    private bool isRendered = false;
    private bool esLabOrAdmin => user?.IsInRole("laboratorista") == true || user?.IsInRole("administrador") == true;

    private bool yaRenderizado = false;
    private bool cargando = true;
    private ClaimsPrincipal? usuario;
    private bool showContent = false;
    private bool esLabOAdmin => usuario?.IsInRole("laboratorista") == true || usuario?.IsInRole("administrador") == true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            yaRenderizado = true;

            var auth = await AuthProvider.GetAuthenticationStateAsync();
            usuario = auth.User;

            if (!usuario.Identity?.IsAuthenticated ?? true)
            {
                var returnUrl = new Uri(Navigation.Uri).PathAndQuery;
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
                return;
            }

            showContent = esLabOAdmin;

            if (showContent)
            {
                await InicializarDatos();
                cargando = false;
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private bool disposed = false;

    public void Dispose()
    {
        disposed = true;
    }



    private async Task InicializarDatos()
    {
        var uri = navManager.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("idOrden", out var idOrdenStr))
            idOrden = int.TryParse(idOrdenStr, out var parsedId) ? parsedId : 0;

        if (query.TryGetValue("idsExamenes", out var ids))
            idsExamenes = ids.Select(int.Parse).ToList();

        DatosOrden = await ApiService.ObtenerDetalleOrdenAsync(idOrden);
        if (DatosOrden is null) return;

        var todos = (await ApiService.GetExamenesAsync()).ToList();
        var hijosPorAgregar = new List<ExamenDto>();
        var idsIncluidos = new HashSet<int>();

        foreach (var idPadre in idsExamenes)
        {
            var hijos = (await ApiService.ObtenerHijosDeExamenAsync(idPadre)).ToList();
            foreach (var hijo in hijos)
                if (idsIncluidos.Add(hijo.IdExamen))
                    hijosPorAgregar.Add(hijo);
        }

        foreach (var idPadre in idsExamenes)
        {
            var hijos = (await ApiService.ObtenerHijosDeExamenAsync(idPadre)).ToList();
            if (!hijos.Any())
            {
                var examenPadre = todos.FirstOrDefault(e => e.IdExamen == idPadre);
                if (examenPadre != null && idsIncluidos.Add(examenPadre.IdExamen))
                    hijosPorAgregar.Add(examenPadre);
            }
        }

        ExamenesSeleccionados = hijosPorAgregar;

        foreach (var ex in ExamenesSeleccionados)
        {
            ValoresIngresados.TryAdd(ex.IdExamen, string.Empty);
            ObservacionesIngresadas.TryAdd(ex.IdExamen, string.Empty);
        }

        cargando = false;
    }

    private async Task GuardarResultados()
    {
        var resultados = ExamenesSeleccionados.Select(ex => new ResultadoExamenDto
        {
            IdExamen = ex.IdExamen,
            Valor = decimal.TryParse(ValoresIngresados.GetValueOrDefault(ex.IdExamen), out var v) ? v : 0,
            Unidad = ex.Unidad,
            ValorReferencia = ex.ValorReferencia,
            Observacion = ObservacionesIngresadas.GetValueOrDefault(ex.IdExamen)
        }).ToList();

        var dto = new ResultadoGuardarDto
        {
            IdOrden = idOrden,
            IdPaciente = DatosOrden!.IdPaciente,
            FechaResultado = fechaResultado,
            IdMedico = DatosOrden.IdMedico,
            Examenes = resultados,
            ObservacionesGenerales = observacionesGenerales
        };

        var response = await ApiService.GuardarResultadosAsync(dto);
        var resultadoJson = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Resultado guardado correctamente.");
            Navigation.NavigateTo("/resultados");
        }
        else
        {
            try
            {
                var errorObj = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(resultadoJson);
                var mensaje = errorObj != null && errorObj.ContainsKey("mensaje")
                    ? errorObj["mensaje"]
                    : "Error al guardar el resultado.";
                await JS.InvokeVoidAsync("alert", mensaje);
            }
            catch
            {
                await JS.InvokeVoidAsync("alert", "Error inesperado al procesar la respuesta.");
            }
        }
    }
}
