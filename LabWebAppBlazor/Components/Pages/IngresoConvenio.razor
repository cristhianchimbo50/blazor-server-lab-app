@page "/ingreso_convenio"
@rendermode InteractiveServer
<PageTitle>Registrar Nuevo Convenio</PageTitle>

@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 class="mb-4"><i class="bi bi-file-earmark-plus me-2"></i>Registrar Nuevo Convenio</h3>

@if (!isRendered)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando...</strong>
    </div>
}
else if (!showContent)
{
    <div class="alert alert-danger text-center">
        <i class="bi bi-exclamation-triangle me-2"></i>No autorizado para ver esta sección.
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-body row g-3">
            <div class="col-md-6">
                <label for="medico" class="form-label fw-semibold">Médico</label>
                <select id="medico" class="form-select" @bind="idMedicoSeleccionado">
                    <option disabled selected value="">Seleccione un médico</option>
                    @foreach (var medico in medicos)
                    {
                        <option value="@medico.IdMedico">@medico.NombreMedico</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="fechaConvenio" class="form-label fw-semibold">Fecha del Convenio</label>
                <InputDate id="fechaConvenio" class="form-control" @bind-Value="fechaConvenio" />
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button class="btn btn-primary w-100" @onclick="CargarOrdenes" disabled="@(!idMedicoSeleccionado.HasValue)">
                    <i class="bi bi-search"></i> Cargar Órdenes
                </button>
            </div>
        </div>
    </div>

    @if (ordenesDisponibles.Any())
    {
        <div class="row g-4">
            <div class="col-lg-6">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-light fw-semibold">
                        <i class="bi bi-clipboard-check me-2"></i>Órdenes Disponibles
                    </div>
                    <div class="card-body p-2">
                        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                            <table class="table table-sm table-bordered table-hover align-middle">
                                <thead class="table-light text-center">
                                    <tr>
                                        <th># Orden</th>
                                        <th>Paciente</th>
                                        <th>Total</th>
                                        <th>Estado</th>
                                        <th>✔</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var orden in ordenesDisponibles)
                                    {
                                        <tr>
                                            <td>@orden.NumeroOrden</td>
                                            <td>@orden.Paciente</td>
                                            <td>@orden.Total.ToString("C")</td>
                                            <td>@orden.EstadoPago</td>
                                            <td class="text-center">
                                                <input type="checkbox" @bind="@orden.Seleccionado" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="text-end fw-bold mt-2">
                            Total órdenes: @ordenesDisponibles.Sum(o => o.Total).ToString("C")
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-light fw-semibold">
                        <i class="bi bi-cart-check me-2"></i>Órdenes Seleccionadas
                    </div>
                    <div class="card-body p-2">
                        <table class="table table-sm table-bordered align-middle">
                            <thead class="table-light text-center">
                                <tr>
                                    <th># Orden</th>
                                    <th>Paciente</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var orden in ordenesSeleccionadas)
                                {
                                    <tr>
                                        <td>@orden.NumeroOrden</td>
                                        <td>@orden.Paciente</td>
                                        <td>@orden.Total.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="text-end fw-bold mt-2">
                            Total seleccionado: @ordenesSeleccionadas.Sum(o => o.Total).ToString("C")
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4 text-end">
            <button class="btn btn-primary" @onclick="MostrarModalPago" disabled="@(ordenesSeleccionadas.Count == 0)">
                <i class="bi bi-cash-coin me-1"></i> Calcular Pago
            </button>
        </div>
    }

    @if (mostrarModal)
    {
        <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><i class="bi bi-calculator me-2"></i> Pago al Médico</h5>
                        <button class="btn-close" @onclick="CerrarModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Porcentaje de Comisión (%)</label>
                            <InputNumber class="form-control" @bind-Value="convenioDto.Comision" Min="0" Max="100" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Monto Total</label>
                            <input class="form-control" value="@ordenesSeleccionadas.Sum(o => o.Total).ToString("C")" disabled />
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Total a Pagar</label>
                            <input class="form-control" value="@totalPagar.ToString("C")" disabled />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModal">
                            <i class="bi bi-x-circle me-1"></i> Cancelar
                        </button>
                        <button class="btn btn-success" @onclick="GuardarConvenio">
                            <i class="bi bi-save me-1"></i> Registrar Convenio
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}




@code {
    private List<MedicoDto> medicos = new();
    private List<OrdenConvenioDto> ordenesDisponibles = new();
    private List<OrdenConvenioDto> ordenesSeleccionadas => ordenesDisponibles.Where(o => o.Seleccionado).ToList();
    private int? idMedicoSeleccionado;
    private DateTime fechaConvenio = DateTime.Today;
    private bool mostrarModal = false;

    private decimal totalPagar => ordenesSeleccionadas.Sum(o => o.Total) * (convenioDto.Comision / 100m);
    private ConvenioRegistrarDto convenioDto = new();

    private ClaimsPrincipal? user;
    private bool isRendered = false;
    private bool showContent = false;
    private bool esAdmin => user?.IsInRole("administrador") ?? false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                // Redirige a login con returnUrl para volver tras autenticación
                var returnUrl = new Uri(Navigation.Uri).PathAndQuery;
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
                return;
            }

            // Solo admin puede acceder
            showContent = esAdmin;
            isRendered = true;

            if (showContent)
                medicos = await ApiService.GetAsync<List<MedicoDto>>("medicos");

            StateHasChanged();
        }
    }


    private async Task CargarOrdenes()
    {
        if (idMedicoSeleccionado.HasValue)
        {
            ordenesDisponibles = await ApiService.GetAsync<List<OrdenConvenioDto>>(
                $"convenios/ordenes-disponibles/{idMedicoSeleccionado.Value}"
            ) ?? new();
        }
    }

    private void MostrarModalPago()
    {
        convenioDto.IdMedico = idMedicoSeleccionado;
        convenioDto.FechaConvenio = DateOnly.FromDateTime(fechaConvenio);

        convenioDto.Ordenes = ordenesSeleccionadas.Select(o => new OrdenConvenioSeleccionadoDto
        {
            IdOrden = o.IdOrden,
            Total = o.Total
        }).ToList();

        mostrarModal = true;
    }

    private void CerrarModal() => mostrarModal = false;

    private async Task GuardarConvenio()
    {
        convenioDto.TotalPagar = totalPagar;
        convenioDto.IdUsuario = await ApiService.ObtenerIdUsuarioActualAsync(JS);

        var exito = await ApiService.PostAsync("convenios/registrar-convenio", convenioDto);
        if (exito)
            Navigation.NavigateTo("/convenios");
        else
            await JS.InvokeVoidAsync("alert", "Error al registrar el convenio.");
    }
}
