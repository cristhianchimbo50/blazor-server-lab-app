@page "/ingreso-stock"
@rendermode InteractiveServer
<PageTitle>Ingreso de Stock</PageTitle>

@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS


<h3 class="mb-4"><i class="bi bi-box-arrow-in-down me-2"></i>Ingreso de Stock</h3>

@if (!yaRenderizado)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando...</strong>
    </div>
}
else if (!showContent)
{
    <div class="alert alert-danger text-center mt-5">
        <i class="bi bi-exclamation-triangle me-2"></i>
        No autorizado para acceder a esta sección.
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <label class="form-label fw-semibold">Fecha de Ingreso</label>
            <InputDate class="form-control" @bind-Value="fechaIngreso" />
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light fw-semibold">
                    <i class="bi bi-clipboard-data me-2"></i> Reactivos Disponibles
                </div>
                <div class="card-body p-2">
                    <div class="table-responsive" style="max-height: 350px; overflow-y: auto;">
                        <table class="table table-sm table-hover table-bordered align-middle">
                            <thead class="table-light text-center">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Fabricante</th>
                                    <th>Unidad</th>
                                    <th class="text-end">Stock</th>
                                    <th>Seleccionado</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var r in todosReactivos)
                                {
                                    var seleccionado = reactivosSeleccionados.Any(x => x.IdReactivo == r.IdReactivo);
                                    <tr class="@(reactivosSeleccionados.Any(x => x.IdReactivo == r.IdReactivo) ? "table-primary" : "")">
                                        <td>@r.NombreReactivo</td>
                                        <td>@r.Fabricante</td>
                                        <td>@r.Unidad</td>
                                        <td class="text-end">@r.CantidadDisponible.ToString("N2")</td>
                                        <td class="text-center">
                                            <input type="checkbox"
                                                   checked="@reactivosSeleccionados.Any(x => x.IdReactivo == r.IdReactivo)"
                                                   @onchange="e => CambiarSeleccionReactivo(r, e.Value is bool b && b)" />
                                        </td>
                                    </tr>

                                }
                            </tbody>
                        </table>
                    </div>
                    <small class="text-muted">* Marque los reactivos a ingresar.</small>

                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light fw-semibold">
                    <i class="bi bi-cart-plus me-2"></i> Reactivos Seleccionados para Ingreso
                </div>
                <div class="card-body p-2">
                    <table class="table table-sm table-bordered align-middle">
                        <thead class="table-light text-center">
                            <tr>
                                <th>Reactivo</th>
                                <th style="width: 30%;">Cantidad</th>
                                <th>Unidad</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var r in reactivosSeleccionados)
                            {
                                <tr>
                                    <td>@r.NombreReactivo</td>
                                    <td>
                                        <InputNumber class="form-control form-control-sm text-end"
                                                     @bind-Value="r.Cantidad"
                                                     Min="0.01" Step="0.01" />
                                    </td>
                                    <td>@r.Unidad</td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-danger"
                                                title="Quitar"
                                                @onclick="() => QuitarReactivo(r.IdReactivo)">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @if (!reactivosSeleccionados.Any())
                    {
                        <div class="alert alert-info text-center mt-3">
                            <i class="bi bi-info-circle me-2"></i> No hay reactivos seleccionados.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4 text-end">
        <button class="btn btn-primary"
                @onclick="GuardarMovimientosAsync"
                disabled="@(!reactivosSeleccionados.Any())">
            <i class="bi bi-save2 me-1"></i> Guardar Ingresos
        </button>
    </div>

}


@code {
    private List<ReactivoDto> todosReactivos = new();
    private List<MovimientoReactivoDto> reactivosSeleccionados = new();
    private DateTime fechaIngreso = DateTime.Now;
    private bool datosCargados = false;

    private bool yaRenderizado = false;
    private bool showContent = false;
    private ClaimsPrincipal? usuario;
    private bool disposed = false;
    private bool EsAdmin => usuario?.IsInRole("administrador") == true;
    private bool EsRecep => usuario?.IsInRole("recepcionista") == true;

    public void Dispose()
    {
        disposed = true;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            yaRenderizado = true;

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            usuario = authState.User;

            if (!usuario.Identity?.IsAuthenticated ?? true)
            {
                var returnUrl = new Uri(Navigation.Uri).PathAndQuery;
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
                return;
            }

            showContent = EsAdmin || EsRecep;

            if (showContent)
            {
                var lista = await ApiService.GetReactivosAsync();
                todosReactivos = lista.OrderBy(r => r.NombreReactivo).ToList();
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private void CambiarSeleccionReactivo(ReactivoDto reactivo, bool seleccionado)
    {
        if (seleccionado)
        {
            if (!reactivosSeleccionados.Any(r => r.IdReactivo == reactivo.IdReactivo))
            {
                reactivosSeleccionados.Add(new MovimientoReactivoDto
                {
                    IdReactivo = reactivo.IdReactivo,
                    NombreReactivo = reactivo.NombreReactivo,
                    Unidad = reactivo.Unidad,
                    Cantidad = 0,
                    FechaMovimiento = fechaIngreso
                });
            }
        }
        else
        {
            QuitarReactivo(reactivo.IdReactivo);
        }
    }


    private void SeleccionarReactivo(ReactivoDto reactivo)
    {
        if (!reactivosSeleccionados.Any(r => r.IdReactivo == reactivo.IdReactivo))
        {
            reactivosSeleccionados.Add(new MovimientoReactivoDto
            {
                IdReactivo = reactivo.IdReactivo,
                NombreReactivo = reactivo.NombreReactivo,
                Unidad = reactivo.Unidad,
                Cantidad = 0,
                FechaMovimiento = fechaIngreso
            });
        }
    }

    private void QuitarReactivo(int id)
    {
        var reactivo = reactivosSeleccionados.FirstOrDefault(r => r.IdReactivo == id);
        if (reactivo is not null)
            reactivosSeleccionados.Remove(reactivo);
    }

    private async Task GuardarMovimientosAsync()
    {
        if (reactivosSeleccionados.Any(r => r.Cantidad <= 0))
        {
            await JS.InvokeVoidAsync("alert", "Todas las cantidades deben ser mayores a cero.");
            return;
        }

        foreach (var mov in reactivosSeleccionados)
        {
            mov.TipoMovimiento = "INGRESO";
            mov.Observacion = "Ingreso manual de stock";
        }

        var result = await ApiService.RegistrarMovimientosAsync(reactivosSeleccionados);

        if (result.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Stock ingresado correctamente.");
            reactivosSeleccionados.Clear();
            var lista = await ApiService.GetReactivosAsync();
            todosReactivos = lista.OrderBy(r => r.NombreReactivo).ToList();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al guardar los ingresos.");
        }
    }
}
