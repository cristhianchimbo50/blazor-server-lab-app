@page "/"
@page "/login"
@attribute [AllowAnonymous]
@layout EmptyLayout


@using LabWebAppBlazor.Components.Layout
@using System.Web
@using System.Security.Claims
@using LabWebAppBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IApiService ApiService
@rendermode InteractiveServer

<h3>Iniciar Sesión</h3>

@if (!isRendered)
{
    <p>Cargando interfaz...</p>
}
else
{
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Correo</label>
            <InputText @bind-Value="loginModel.CorreoUsuario" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Contraseña</label>
            <InputText @bind-Value="loginModel.Clave" type="password" class="form-control" />
        </div>

        <button class="btn btn-primary" type="submit">Ingresar</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(error))
{
    <p class="text-danger">@error</p>
}

@code {
    private bool isRendered = false;
    private LoginRequestDto loginModel = new();
    private string? error;
    private string? redirectUrl;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        redirectUrl = query["ReturnUrl"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
            StateHasChanged();
        }
    }

    private async Task HandleLogin()
    {
        if (!isRendered)
            return;

        error = null;

        var result = await ApiService.LoginAsync(loginModel);
        Console.WriteLine("🔐 Token generado: " + result?.Token);

        if (result == null)
        {
            error = "Credenciales inválidas.";
            return;
        }

        if (AuthProvider is CustomAuthenticationStateProvider customAuth)
        {
            await customAuth.SignInAsync(result);
            Console.WriteLine("✅ Sesión guardada. Esperando confirmación...");

            // 🔁 FORZAR reautenticación para asegurar lectura inmediata del estado
            customAuth.ForceReauthentication();

            // ⏳ Espera a que Blazor actualice internamente el estado (sí, es necesario)
            await Task.Delay(1000);

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var redirect = string.IsNullOrEmpty(redirectUrl) ? "/pacientes" : redirectUrl!;
                Navigation.NavigateTo(redirect, forceLoad: true);
            }
            else
            {
                Console.WriteLine("❌ Falló la autenticación después del login.");
                error = "Hubo un problema al autenticar. Intente de nuevo.";
            }
        }
        else
        {
            Console.WriteLine("⚠️ Error al castear AuthProvider.");
        }
    }
}