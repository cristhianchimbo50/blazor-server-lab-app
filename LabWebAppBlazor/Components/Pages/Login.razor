@page "/"
@page "/login"
@attribute [AllowAnonymous]
@layout EmptyLayout


@using LabWebAppBlazor.Components.Layout
@using System.Web
@using System.Security.Claims
@using LabWebAppBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IApiService ApiService
@rendermode InteractiveServer

<div class="container d-flex align-items-center justify-content-center vh-100">
    <div class="row w-100 shadow-lg rounded p-4" style="max-width: 900px; background-color: white;">
        <div class="col-md-6 d-none d-md-block text-center">
            <img src="images/login-art.png" class="img-fluid" alt="Login Illustration" />
        </div>
        <div class="col-md-6">
            <h3 class="mb-4 fw-bold">Iniciar Sesión</h3>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="correo" class="form-label">Correo</label>
                    <InputText id="correo" @bind-Value="loginModel.CorreoUsuario" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="clave" class="form-label">Contraseña</label>
                    <InputText id="clave" @bind-Value="loginModel.Clave" type="password" class="form-control" />
                </div>

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger" role="alert">@error</div>
                }

                <button type="submit" class="btn btn-primary w-100">Ingresar</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private bool isRendered = false;
    private LoginRequestDto loginModel = new();
    private string? error;
    private string? redirectUrl;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        redirectUrl = query["ReturnUrl"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
            StateHasChanged();
        }
    }

    private async Task HandleLogin()
    {
        if (!isRendered)
            return;

        error = null;
        var result = await ApiService.LoginAsync(loginModel);

        if (result == null)
        {
            error = "Credenciales inválidas.";
            return;
        }

        if (AuthProvider is CustomAuthenticationStateProvider customAuth)
        {
            await customAuth.SignInAsync(result);
            customAuth.ForceReauthentication();
            await Task.Delay(1000);

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                if (result.EsContraseñaTemporal)
                {
                    Navigation.NavigateTo("/cambiar-contraseña", forceLoad: true);
                }
                else
                {
                    var redirect = string.IsNullOrEmpty(redirectUrl) ? "/home" : redirectUrl!;
                    Navigation.NavigateTo(redirect, forceLoad: true);
                }
            }
            else
            {
                error = "Autenticación fallida. Intente de nuevo.";
            }
        }
    }
}