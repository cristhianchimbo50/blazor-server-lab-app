@page "/medicos"
@rendermode InteractiveServer
@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@inject IApiService ApiService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<h3>Gestión de Médicos</h3>

@if (!isRendered)
{
    <p>Cargando interfaz...</p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-3">
            <label>Buscar por</label>
            <InputSelect class="form-control" @bind-Value="criterioBusqueda">
                <option value="">-- Seleccione --</option>
                <option value="nombre">Nombre</option>
                <option value="especialidad">Especialidad</option>
                <option value="telefono">Teléfono</option>
                <option value="correo">Correo</option>
            </InputSelect>
        </div>
        <div class="col-md-5">
            <label>Valor</label>
            <InputText class="form-control" @bind-Value="valorBusqueda" />
        </div>
        <div class="col-md-4 mt-4">
            <button class="btn btn-primary" @onclick="BuscarMedicos">Buscar</button>
            <button class="btn btn-success ms-2" @onclick="MostrarModal">Agregar Médico</button>
        </div>
    </div>

    @if (ListaMedicos is null || !ListaMedicos.Any())
    {
        <p>No se encontraron médicos.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Nombre</th>
                    <th>Especialidad</th>
                    <th>Teléfono</th>
                    <th>Correo</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var medico in ListaMedicos)
                {
                    <tr>
                        <td>@medico.NombreMedico</td>
                        <td>@medico.Especialidad</td>
                        <td>@medico.Telefono</td>
                        <td>@medico.Correo</td>
                        <td>@(medico.Anulado ? "Anulado" : "Activo")</td>
                        <td>
                            @if (!medico.Anulado)
                            {
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarMedico(medico)">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmarAnulacion(medico.IdMedico)">Anular</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => ConfirmarReactivacion(medico.IdMedico)">Activar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<!-- Modal -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.4);">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@MedicoActual" OnValidSubmit="GuardarMedico">
                <div class="modal-header">
                    <h5 class="modal-title">@(MedicoActual.IdMedico == 0 ? "Agregar Médico" : "Editar Médico")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="MedicoActual.NombreMedico" />
                    </div>
                    <div class="mb-3">
                        <label>Especialidad</label>
                        <InputText class="form-control" @bind-Value="MedicoActual.Especialidad" />
                    </div>
                    <div class="mb-3">
                        <label>Teléfono</label>
                        <InputText class="form-control" @bind-Value="MedicoActual.Telefono" />
                    </div>
                    <div class="mb-3">
                        <label>Correo</label>
                        <InputText class="form-control" @bind-Value="MedicoActual.Correo" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<MedicoDto> ListaMedicos = new();
    private MedicoDto MedicoActual = new();
    private bool modalVisible = false;
    private bool isRendered = false;
    private string criterioBusqueda = "";
    private string valorBusqueda = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
            ListaMedicos = (await ApiService.GetMedicosAsync()).ToList();
            StateHasChanged();
        }
    }

    private async Task BuscarMedicos()
    {
        if (string.IsNullOrWhiteSpace(criterioBusqueda) || string.IsNullOrWhiteSpace(valorBusqueda))
        {
            ListaMedicos = (await ApiService.GetMedicosAsync()).ToList();
        }
        else
        {
            ListaMedicos = (await ApiService.BuscarMedicosAsync(criterioBusqueda, valorBusqueda)).ToList();
        }
    }

    private void MostrarModal()
    {
        MedicoActual = new MedicoDto();
        modalVisible = true;
    }

    private void EditarMedico(MedicoDto medico)
    {
        MedicoActual = new MedicoDto
            {
                IdMedico = medico.IdMedico,
                NombreMedico = medico.NombreMedico,
                Especialidad = medico.Especialidad,
                Telefono = medico.Telefono,
                Correo = medico.Correo,
                Anulado = medico.Anulado
            };
        modalVisible = true;
    }

    private void CerrarModal() => modalVisible = false;

    private async Task GuardarMedico()
    {
        HttpResponseMessage response;
        if (MedicoActual.IdMedico == 0)
            response = await ApiService.CrearMedicoAsync(MedicoActual);
        else
            response = await ApiService.EditarMedicoAsync(MedicoActual.IdMedico, MedicoActual);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Médico guardado correctamente.");
            modalVisible = false;
            ListaMedicos = (await ApiService.GetMedicosAsync()).ToList();
        }
        else
        {
            var msg = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Error: {response.StatusCode}\n{msg}");
        }
    }

    private async Task ConfirmarAnulacion(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Desea anular este médico?");
        if (confirmar)
        {
            var response = await ApiService.AnularMedicoAsync(id);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Médico anulado.");
                ListaMedicos = (await ApiService.GetMedicosAsync()).ToList();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error: {response.StatusCode}");
            }
        }
    }

    private async Task ConfirmarReactivacion(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Desea activar este médico?");
        if (confirmar)
        {
            var medico = await ApiService.ObtenerMedicoPorIdAsync(id);
            if (medico is not null)
            {
                medico.Anulado = false;
                var response = await ApiService.EditarMedicoAsync(id, medico);
                if (response.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("alert", "Médico reactivado.");
                    ListaMedicos = (await ApiService.GetMedicosAsync()).ToList();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"Error al reactivar médico: {response.StatusCode}");
                }
            }
        }
    }
}
