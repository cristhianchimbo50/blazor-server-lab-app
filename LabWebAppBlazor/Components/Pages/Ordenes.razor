@page "/ordenes"
@rendermode InteractiveServer
<PageTitle>Gestión de Órdenes</PageTitle>

@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h4 class="mb-4"><i class="fas fa-file-medical me-2 text-primary"></i>Gestión de Órdenes</h4>

@if (!isRendered)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando...</strong>
    </div>
}
else if (!showContent)
{
    <div class="alert alert-danger">No autorizado.</div>
}
else
{
    <div class="card mb-3 shadow-sm">
        <div class="card-body row g-3">
            <div class="col-md-3">
                <label class="form-label">Buscar por</label>
                <InputSelect class="form-select" @bind-Value="criterioBusqueda">
                    <option value="">-- Seleccione --</option>
                    <option value="numero">Número de Orden</option>
                    <option value="cedula">Cédula</option>
                    <option value="nombre">Nombre</option>
                    <option value="estadoPago">Estado de Pago</option>
                </InputSelect>
            </div>
            <div class="col-md-5">
                <label class="form-label">Valor</label>
                <InputText class="form-control" @bind-Value="valorBusqueda" />
            </div>
            <div class="col-md-4 d-flex align-items-end gap-2 flex-wrap justify-content-md-end">
                <button class="btn btn-primary" @onclick="BuscarOrdenes" title="Buscar">
                    <i class="fas fa-search"></i>
                </button>
                @if (EsAdmin || EsRecepcionista)
                {
                    <button class="btn btn-success" @onclick="IrAIngresarOrden">
                        <i class="fas fa-plus"></i>
                    </button>
                }
            </div>
        </div>
    </div>


    @if (ordenes == null || ordenes.Count == 0)
    {
        <div class="alert alert-warning">No se encontraron órdenes.</div>
    }
    else
    {

        <div class="d-flex justify-content-between align-items-center mb-2 flex-wrap gap-2">
            <span>
                Mostrando @((ordenes.Count == 0) ? 0 : ((CurrentPage - 1) * PageSize + 1))
                - @((CurrentPage - 1) * PageSize + PaginatedOrdenes.Count()) de @ordenes.Count órdenes
            </span>

            <div class="d-flex align-items-center gap-2">
                <select class="form-select form-select-sm" style="width: auto;" @bind="PageSize">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="75">75</option>
                </select>
                <nav>
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item">
                            <button class="page-link" @onclick="() => CambiarPagina(-1)">«</button>
                        </li>
                        <li class="page-item">
                            <button class="page-link" @onclick="() => CambiarPagina(1)">»</button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered table-hover align-middle text-center">
                <thead class="table-light">
                    <tr>
                        <th>Número</th>
                        <th>Cédula</th>
                        <th>Nombre</th>
                        <th>Fecha</th>
                        <th>Total</th>
                        <th>Pagado</th>
                        <th>Saldo</th>
                        <th>Estado Pago</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var orden in PaginatedOrdenes)
                    {
                        <tr>
                            <td>@orden.NumeroOrden</td>
                            <td>@orden.CedulaPaciente</td>
                            <td>@orden.NombrePaciente</td>
                            <td>@orden.FechaOrden.ToShortDateString()</td>
                            <td>@orden.Total.ToString("C")</td>
                            <td>@orden.TotalPagado.ToString("C")</td>
                            <td>@orden.SaldoPendiente.ToString("C")</td>
                            <td>
                                <span class="badge bg-@(orden.EstadoPago == "PAGADO" ? "success" : "warning")">
                                    @orden.EstadoPago
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-@(orden.Anulado ? "danger" : "success")">
                                    @(orden.Anulado ? "Deshabilitado" : "Habilitado")
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm text-white shadow-sm btn-hover-shadow"
                                        style="background-color: #007bff; border-radius: 0.5rem;"
                                        title="Ver Detalles"
                                        @onclick="() => VerDetalleOrden(orden.IdOrden)">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@if (mostrarDetalleOrden && DetalleActual is not null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content shadow">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-info-circle me-2"></i>Detalle de Orden
                        <span class="badge bg-light text-dark">@DetalleActual.NumeroOrden</span>
                    </h5>
                    <button class="btn-close" @onclick="ConfirmarCerrarDetalle"></button>
                </div>
                <div class="modal-body">
                    @if (DetalleActual.Anulado)
                    {
                        <div class="alert alert-danger text-center fw-bold">
                            Esta orden ha sido anulada.
                        </div>
                    }

                    <div class="row g-2 mb-3">
                        <div class="col-md-3">
                            <label><strong>Fecha de Orden</strong></label>
                            <input class="form-control"
                                   value="@(DateTime.TryParse(DetalleActual.FechaOrden, out var fechaOrden) ? fechaOrden.ToString("dd/MM/yyyy") : "Fecha no disponible")"
                                   disabled />
                        </div>
                        <div class="col-md-3">
                            <label><strong>Cédula</strong></label>
                            <input class="form-control" value="@DetalleActual.CedulaPaciente" disabled />
                        </div>
                        <div class="col-md-6">
                            <label><strong>Nombre del Paciente</strong></label>
                            <input class="form-control" value="@DetalleActual.NombrePaciente" disabled />
                        </div>
                        <div class="col-md-6">
                            <label><strong>Dirección</strong></label>
                            <input class="form-control" value="@DetalleActual.DireccionPaciente" disabled />
                        </div>
                        <div class="col-md-3">
                            <label><strong>Teléfono</strong></label>
                            <input class="form-control" value="@DetalleActual.TelefonoPaciente" disabled />
                        </div>
                        <div class="col-md-3">
                            <label><strong>Correo</strong></label>
                            <input class="form-control" value="@DetalleActual.CorreoPaciente" disabled />
                        </div>
                        <div class="col-md-3">
                            <label><strong>Estado de Pago</strong></label>
                            <input class="form-control" value="@DetalleActual.EstadoPago" disabled />
                        </div>
                    </div>

                    <h5 class="mt-4"><i class="fas fa-vials me-2"></i>Exámenes</h5>
                    <div class="table-responsive">
                        <table class="table table-sm table-bordered align-middle text-center">
                            <thead class="table-light">
                                <tr>
                                    <th>Seleccionar</th>
                                    <th>Nombre del Examen</th>
                                    <th>Estudio</th>
                                    <th>Resultado</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ex in DetalleActual.Examenes.OrderBy(e => e.NombreEstudio))
                                {
                                    <tr>
                                        <td>
                                            <input type="checkbox"
                                                   @bind="@ex.Seleccionado"
                                                   disabled="@((DetalleActual.Anulado || ex.IdResultado is not null))" />
                                        </td>
                                        <td>@ex.NombreExamen</td>
                                        <td>@ex.NombreEstudio</td>
                                        <td>
                                            @if (ex.IdResultado.HasValue)
                                            {
                                                <span class="badge bg-success">@ex.NumeroResultado</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Pendiente</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @if (!DetalleActual.Anulado)
                    {
                        <div class="d-flex flex-wrap gap-2 justify-content-start mt-3">

                            <button class="btn btn-secondary" @onclick="VisualizarTicketOrden">
                                <i class="fas fa-receipt me-1"></i> Imprimir Orden
                            </button>

                            @if (EsAdmin || EsLaboratorista)
                            {
                                <button class="btn btn-success" @onclick="async () => await ConfirmarAccionConPago(IrAIngresarResultados)">
                                    <i class="fas fa-flask me-1"></i> Ingresar Resultados
                                </button>
                            }

                            <button class="btn btn-primary" @onclick="async () => await ConfirmarAccionConPago(VisualizarResultadosMultiples)">
                                <i class="fas fa-file-pdf me-1"></i> Imprimir Resultados
                            </button>

                            @if (EsAdmin)
                            {
                                <button class="btn btn-danger" @onclick="AnularOrden">
                                    <i class="fas fa-ban me-1"></i> Anular Orden
                                </button>
                            }

                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
}

<div class="modal fade" id="pdfModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Resultados PDF</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <iframe id="iframePdf" width="100%" height="600px"></iframe>
            </div>
        </div>
    </div>
</div>


@code {
    private List<OrdenDto> ordenes = new();
    private string criterioBusqueda = "";
    private string valorBusqueda = "";

    private bool isRendered = false;
    private bool showContent = false;
    private ClaimsPrincipal? user;

    private ResultadoDetalleDto? DetalleResultado;
    private OrdenDetalleDto? DetalleActual;
    private bool mostrarDetalleOrden = false;

    private bool EsAdmin => user?.IsInRole("administrador") ?? false;
    private bool EsRecepcionista => user?.IsInRole("recepcionista") ?? false;
    private bool EsLaboratorista => user?.IsInRole("laboratorista") ?? false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                // Redirección segura con returnUrl (minúsculas)
                var returnUrl = new Uri(Navigation.Uri).PathAndQuery;
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
                return;
            }

            // Solo admin, recepcionista o laboratorista pueden acceder
            if (!(EsAdmin || EsRecepcionista || EsLaboratorista))
            {
                showContent = false;
                StateHasChanged();
                return;
            }

            showContent = true;
            await CargarOrdenes();
            StateHasChanged();
        }
    }

    private async Task VisualizarTicketOrden()
    {
        if (DetalleActual is null)
            return;

        var pdfBytes = await ApiService.ObtenerTicketOrdenPdfAsync(DetalleActual.IdOrden);
        if (pdfBytes.Length == 0)
        {
            await JS.InvokeVoidAsync("alert", "Error al generar el ticket.");
            return;
        }

        var base64Pdf = Convert.ToBase64String(pdfBytes);
        var pdfUrl = $"data:application/pdf;base64,{base64Pdf}";

        await JS.InvokeVoidAsync("mostrarModalPdfDesdeBytes", pdfUrl);
    }

    private async Task ConfirmarAccionConPago(Func<Task> accion)
    {
        if (DetalleActual?.EstadoPago?.ToUpper() == "PENDIENTE")
        {
            bool continuar = await JS.InvokeAsync<bool>("confirm", "El estado de pago es PENDIENTE. ¿Desea continuar de todos modos?");
            if (!continuar)
                return;
        }

        await accion.Invoke();
    }



    private async Task CargarOrdenes()
    {
        ordenes = (await ApiService.GetOrdenesAsync())
            .OrderByDescending(o => o.IdOrden)
            .ToList();
    }

    private async Task BuscarOrdenes()
    {
        var todas = await ApiService.GetOrdenesAsync();

        if (string.IsNullOrWhiteSpace(criterioBusqueda) || string.IsNullOrWhiteSpace(valorBusqueda))
        {
            ordenes = todas.OrderByDescending(o => o.IdOrden).ToList();
        }
        else
        {
            var val = valorBusqueda.Trim().ToLower();

            ordenes = criterioBusqueda switch
            {
                "numero" => todas.Where(o => !string.IsNullOrEmpty(o.NumeroOrden) && o.NumeroOrden.ToLower().Contains(val)).ToList(),
                "cedula" => todas.Where(o => !string.IsNullOrEmpty(o.CedulaPaciente) && o.CedulaPaciente.ToLower().Contains(val)).ToList(),
                "nombre" => todas.Where(o => !string.IsNullOrEmpty(o.NombrePaciente) && o.NombrePaciente.ToLower().Contains(val)).ToList(),
                "estadoPago" => todas.Where(o => !string.IsNullOrEmpty(o.EstadoPago) && o.EstadoPago.ToLower().Contains(val)).ToList(),
                _ => todas.ToList()
            };
        }

        ordenes = ordenes.OrderByDescending(o => o.IdOrden).ToList();
        StateHasChanged();
    }

    private void IrAIngresarOrden()
    {
        Navigation.NavigateTo("/ordenes/nuevo", forceLoad: true);
    }

    private async Task VerDetalleOrden(int idOrden)
    {
        DetalleActual = await ApiService.ObtenerDetalleOrdenAsync(idOrden);
        mostrarDetalleOrden = true;
    }

    private async Task ConfirmarCerrarDetalle()
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", "¿Desea cerrar el detalle?");
        if (confirmado)
            mostrarDetalleOrden = false;
    }

    private async Task MostrarTicketPreview()
    {
        await JS.InvokeVoidAsync("imprimirTicket");
    }

    private async Task AnularOrden()
    {
        if (DetalleActual is null) return;

        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Está seguro que desea anular esta orden?");
        if (!confirmar) return;

        var response = await ApiService.AnularOrdenAsync(DetalleActual.IdOrden);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Orden anulada correctamente.");
            await CargarOrdenes();
            mostrarDetalleOrden = false;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al anular la orden.");
        }
    }

    private async Task IrAIngresarResultados()
    {
        if (DetalleActual is null) return;

        var todos = DetalleActual.Examenes;
        var seleccionados = todos.Where(e => e.Seleccionado).ToList();

        if (!seleccionados.Any())
        {
            await JS.InvokeVoidAsync("alert", "Debe seleccionar al menos un examen.");
            return;
        }

        var estudio = seleccionados.First().NombreEstudio;
        if (seleccionados.Any(e => e.NombreEstudio != estudio))
        {
            await JS.InvokeVoidAsync("alert", "Todos los exámenes seleccionados deben pertenecer al mismo estudio.");
            return;
        }

        var noSeleccionadosDelMismoEstudio = todos
            .Where(e => !e.Seleccionado && e.NombreEstudio == estudio)
            .ToList();

        if (noSeleccionadosDelMismoEstudio.Any())
        {
            await JS.InvokeVoidAsync("alert", $"Debe seleccionar todos los exámenes del estudio: {estudio}.");
            return;
        }

        var query = string.Join("&", seleccionados.Select(e => $"idsExamenes={e.IdExamen}"));
        Navigation.NavigateTo($"/resultados/ingresar?idOrden={DetalleActual.IdOrden}&{query}");
    }

    private async Task VisualizarResultadoPDF()
    {
        if (DetalleResultado == null || DetalleResultado.Examenes.Any(e => e.Valor == 0))
        {
            await JS.InvokeVoidAsync("alert", "No se puede imprimir resultados incompletos.");
            return;
        }

        var resultadoObj = new
        {
            NumeroResultado = DetalleResultado.NumeroResultado,
            NombrePaciente = DetalleResultado.NombrePaciente,
            CedulaPaciente = DetalleResultado.CedulaPaciente,
            FechaResultado = DetalleResultado.FechaResultado,
            Observaciones = DetalleResultado.Examenes.FirstOrDefault()?.Observacion,
            Examenes = DetalleResultado.Examenes.Select(e => new
            {
                NombreExamen = e.NombreExamen,
                Valor = e.Valor,
                Unidad = e.Unidad,
                ValorReferencia = e.ValorReferencia
            }).ToList()
        };

        await JS.InvokeVoidAsync("imprimirResultados", resultadoObj);
    }

    private async Task VisualizarResultadosMultiples()
    {
        if (DetalleActual is null)
            return;

        var idsResultados = DetalleActual.Examenes
            .Where(e => e.IdResultado.HasValue)
            .Select(e => e.IdResultado!.Value)
            .Distinct()
            .ToList();

        if (!idsResultados.Any())
        {
            await JS.InvokeVoidAsync("alert", "No hay resultados para imprimir.");
            return;
        }

        var pdfBytes = await ApiService.ObtenerResultadosPdfAsync(idsResultados);
        if (pdfBytes.Length == 0)
        {
            await JS.InvokeVoidAsync("alert", "Error al generar el PDF.");
            return;
        }

        var base64Pdf = Convert.ToBase64String(pdfBytes);
        var pdfUrl = $"data:application/pdf;base64,{base64Pdf}";

        await JS.InvokeVoidAsync("mostrarModalPdfDesdeBytes", pdfUrl);
    }

    private int _pageSize = 25;
    private int PageSize
    {
        get => _pageSize;
        set
        {
            if (_pageSize != value)
            {
                _pageSize = value;
                CurrentPage = 1;
            }
        }
    }

    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling(ordenes.Count / (double)PageSize);
    private IEnumerable<OrdenDto> PaginatedOrdenes => ordenes
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);

    private void CambiarPagina(int cambio)
    {
        CurrentPage = Math.Max(1, Math.Min(TotalPages, CurrentPage + cambio));
    }


}
