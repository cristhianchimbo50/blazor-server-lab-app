@page "/pacientes"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using LabWebAppBlazor.Models
@using System.Security.Claims
@using LabWebAppBlazor.Services

@inject IApiService ApiService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation


    <h3 class="mb-4">
        <i class="fas fa-users me-2 text-primary"></i>Gestión de Pacientes
    </h3>

    @if (!isRendered)
    {
        <div class="alert alert-info">Cargando interfaz...</div>
    }
    else if (!showContent)
    {
        <div class="alert alert-danger">No autorizado.</div>
    }
    else
    {
        <div class="row mb-4 g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label">Buscar por</label>
                <InputSelect class="form-select" @bind-Value="criterioBusqueda">
                    <option value="">-- Seleccione --</option>
                    <option value="cedula">Cédula</option>
                    <option value="nombre">Nombre</option>
                    <option value="edad">Edad</option>
                    <option value="direccion">Dirección</option>
                    <option value="correo">Correo</option>
                    <option value="telefono">Teléfono</option>
                </InputSelect>
            </div>
            <div class="col-md-5">
                <label class="form-label">Valor</label>
                <InputText class="form-control" @bind-Value="valorBusqueda" />
            </div>
            <div class="col-md-4 d-grid gap-2 d-md-flex justify-content-md-end">
                <button class="btn btn-primary" @onclick="BuscarPacientes">
                    <i class="bi bi-search"></i> Buscar
                </button>
                <button class="btn btn-success" @onclick="MostrarModal">
                    <i class="bi bi-person-plus-fill"></i> Agregar Paciente
                </button>
            </div>
        </div>

        @if (ListaPacientes is null || ListaPacientes.Count == 0)
        {
            <div class="alert alert-warning">No se encontraron pacientes.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover table-bordered align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Cédula</th>
                            <th>Nombre</th>
                            <th>Edad</th>
                            <th>Dirección</th>
                            <th>Correo</th>
                            <th>Teléfono</th>
                            <th>Estado</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var paciente in ListaPacientes)
                        {
                            <tr>
                                <td>@paciente.CedulaPaciente</td>
                                <td>@paciente.NombrePaciente</td>
                                <td>@paciente.EdadPaciente</td>
                                <td>@paciente.DireccionPaciente</td>
                                <td>@paciente.CorreoElectronicoPaciente</td>
                                <td>@paciente.TelefonoPaciente</td>
                                <td>
                                    <span class="badge bg-@(paciente.Anulado == true ? "danger" : "success")">
                                        @(paciente.Anulado == true ? "Deshabilitado" : "Habilitado")
                                    </span>
                                </td>
                                <td class="text-center">
                                    @if (!(paciente.Anulado ?? false))
                                    {
                                        <button class="btn btn-warning btn-sm me-1 shadow-sm" title="Editar" @onclick="() => EditarPaciente(paciente)">
                                            <i class="bi bi-pencil-square text-black"></i>
                                        </button>
                                        @if (EsAdmin)
                                        {
                                            <button class="btn btn-danger btn-sm shadow-sm" title="Anular" @onclick="() => ConfirmarAnulacion(paciente.IdPaciente)">
                                                <span class="text-white fw-bold">X</span>
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        @if (EsAdmin)
                                        {
                                            <button class="btn btn-success btn-sm shadow-sm" title="Activar" @onclick="() => ConfirmarReactivacion(paciente)">
                                                <i class="bi bi-check-circle-fill"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Sin acciones</span>
                                        }
                                    }
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }


<!-- Modal -->
<div class="modal fade @(modalVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <EditForm Model="@PacienteActual" OnValidSubmit="ValidarYGuardar">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-person-circle me-2"></i>
                        @(PacienteActual.IdPaciente == 0 ? "Nuevo Paciente" : "Editar Paciente")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Cédula</label>
                            <InputText class="form-control" Value="@PacienteActual.CedulaPaciente"
                                       ValueChanged="(v) => PacienteActual.CedulaPaciente = FiltrarSoloNumeros(v)"
                                       ValueExpression="() => PacienteActual.CedulaPaciente"
                                       disabled="@(!EsAdmin && PacienteActual.IdPaciente != 0)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" Value="@PacienteActual.NombrePaciente"
                                       ValueChanged="(v) => PacienteActual.NombrePaciente = FormatearNombre(v)"
                                       ValueExpression="() => PacienteActual.NombrePaciente" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Fecha de Nacimiento</label>
                            <InputDate class="form-control" @bind-Value="PacienteActual.FechaNacPaciente"
                                       disabled="@(!EsAdmin && PacienteActual.IdPaciente != 0)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Teléfono</label>
                            <InputText class="form-control" Value="@PacienteActual.TelefonoPaciente"
                                       ValueChanged="(v) => PacienteActual.TelefonoPaciente = FiltrarSoloNumeros(v)"
                                       ValueExpression="() => PacienteActual.TelefonoPaciente" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Correo</label>
                            <InputText class="form-control" @bind-Value="PacienteActual.CorreoElectronicoPaciente" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Dirección</label>
                            <InputText class="form-control" @bind-Value="PacienteActual.DireccionPaciente" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save-fill me-1"></i> Guardar
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">
                        <i class="bi bi-x-lg me-1"></i> Cancelar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private bool isRendered = false;
    private bool showContent = false;
    private bool modalVisible = false;

    private List<PacienteDto> ListaPacientes = new();
    private PacienteDto PacienteActual = new();
    private ClaimsPrincipal? user;

    private string criterioBusqueda = "";
    private string valorBusqueda = "";

    private bool EsAdmin => user?.IsInRole("administrador") ?? false;
    private bool EsRecepcionista => user?.IsInRole("recepcionista") ?? false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
                Navigation.NavigateTo($"/login?ReturnUrl={Uri.EscapeDataString(returnUrl)}", forceLoad: true);
                return;
            }

            showContent = true;
            StateHasChanged();
        }
    }

    private async Task BuscarPacientes()
    {
        if (string.IsNullOrWhiteSpace(criterioBusqueda) || string.IsNullOrWhiteSpace(valorBusqueda))
        {
            ListaPacientes = (await ApiService.GetPacientesAsync()).ToList();
        }
        else
        {
            ListaPacientes = (await ApiService.BuscarPacientesAsync(criterioBusqueda, valorBusqueda)).ToList();
        }
    }

    private async Task GuardarPaciente()
    {
        PacienteActual.EdadPaciente = CalcularEdad(PacienteActual.FechaNacPaciente);
        PacienteActual.FechaRegistro = DateTime.Now;
        PacienteActual.Anulado = false;

        var result = await ApiService.CrearPacienteAsync(PacienteActual);
        if (result.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Paciente guardado correctamente.");
            PacienteActual = new PacienteDto();
            await BuscarPacientes();
            modalVisible = false;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar: {result.StatusCode}");
        }
    }

    private async Task ValidarYGuardar()
    {
        var edad = CalcularEdad(PacienteActual.FechaNacPaciente);
        if (edad < 0 || edad > 120)
        {
            await JS.InvokeVoidAsync("alert", "La fecha de nacimiento no es válida. El paciente debe tener entre 0 y 120 años.");
            return;
        }

        if (!ValidarCedula(PacienteActual.CedulaPaciente))
        {
            await JS.InvokeVoidAsync("alert", "La cédula ingresada no es válida.");
            return;
        }

        if (string.IsNullOrWhiteSpace(PacienteActual.CorreoElectronicoPaciente) ||
            !PacienteActual.CorreoElectronicoPaciente.Contains("@"))
        {
            await JS.InvokeVoidAsync("alert", "Ingrese un correo electrónico válido.");
            return;
        }

        if (PacienteActual.IdPaciente == 0)
        {
            var existente = await ApiService.ObtenerPacientePorCedulaAsync(PacienteActual.CedulaPaciente);
            if (existente != null)
            {
                if (existente.Anulado == true)
                {
                    var confirmar = await JS.InvokeAsync<bool>(
                        "confirm",
                        $"El paciente con cédula {PacienteActual.CedulaPaciente} está anulado. ¿Desea reactivarlo?"
                    );

                    if (confirmar)
                    {
                        existente.Anulado = false;
                        existente.FechaRegistro = DateTime.Now;
                        existente.EdadPaciente = CalcularEdad(existente.FechaNacPaciente);

                        var reactivado = await ApiService.EditarPacienteAsync(existente.IdPaciente, existente);

                        if (reactivado.IsSuccessStatusCode)
                        {
                            await JS.InvokeVoidAsync("alert", "Paciente reactivado correctamente.");
                            await BuscarPacientes();
                            modalVisible = false;
                            return;
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("alert", $"Error al reactivar paciente: {reactivado.StatusCode}");
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Ya existe un paciente registrado con esa cédula.");
                    return;
                }
            }
        }

        PacienteActual.EdadPaciente = edad;
        PacienteActual.FechaRegistro = DateTime.Now;
        PacienteActual.Anulado = false;

        HttpResponseMessage result;

        if (PacienteActual.IdPaciente == 0)
        {
            result = await ApiService.CrearPacienteAsync(PacienteActual);
        }
        else
        {
            result = await ApiService.EditarPacienteAsync(PacienteActual.IdPaciente, PacienteActual);
        }

        if (result.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Paciente guardado correctamente.");
            PacienteActual = new PacienteDto();
            await BuscarPacientes();
            modalVisible = false;
        }
        else
        {
            var msg = await result.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Error al guardar: {result.StatusCode} \n{msg}");
        }
    }


    private void EditarPaciente(PacienteDto paciente)
    {
        PacienteActual = new PacienteDto
            {
                IdPaciente = paciente.IdPaciente,
                CedulaPaciente = paciente.CedulaPaciente,
                NombrePaciente = paciente.NombrePaciente,
                FechaNacPaciente = paciente.FechaNacPaciente,
                EdadPaciente = paciente.EdadPaciente,
                DireccionPaciente = paciente.DireccionPaciente,
                CorreoElectronicoPaciente = paciente.CorreoElectronicoPaciente,
                TelefonoPaciente = paciente.TelefonoPaciente,
                IdUsuario = paciente.IdUsuario
            };
        modalVisible = true;
    }

    private async Task ConfirmarAnulacion(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "¿Desea anular este paciente?");
        if (confirm)
        {
            var result = await ApiService.AnularPacienteAsync(id);
            if (result.IsSuccessStatusCode)
            {
                await BuscarPacientes();
                await JS.InvokeVoidAsync("alert", "Paciente anulado.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error: {result.StatusCode}");
            }
        }
    }

    private void MostrarModal()
    {
        PacienteActual = new PacienteDto();
        modalVisible = true;
    }

    private void CerrarModal()
    {
        modalVisible = false;
    }

    private int CalcularEdad(DateTime fechaNacimiento)
    {
        var hoy = DateTime.Today;
        var edad = hoy.Year - fechaNacimiento.Year;
        if (fechaNacimiento > hoy.AddYears(-edad)) edad--;
        return edad;
    }

    private bool ValidarCedula(string cedula)
    {
        if (cedula.Length != 10 || !cedula.All(char.IsDigit))
            return false;

        int sum = 0;
        for (int i = 0; i < 9; i++)
        {
            int digit = int.Parse(cedula[i].ToString());
            int coef = (i % 2 == 0) ? 2 : 1;
            int product = digit * coef;
            sum += (product >= 10) ? (product - 9) : product;
        }

        int lastDigit = int.Parse(cedula[9].ToString());
        int calculatedDigit = (sum % 10 == 0) ? 0 : (10 - (sum % 10));

        return lastDigit == calculatedDigit;
    }

    private string FiltrarSoloNumeros(string input)
    {
        return new string(input?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());
    }

    private string FormatearNombre(string input)
    {
        return string.IsNullOrWhiteSpace(input) ? "" : input.ToUpperInvariant();
    }

    private async Task ConfirmarReactivacion(PacienteDto paciente)
    {
        var confirmar = await JS.InvokeAsync<bool>("confirm", $"¿Desea reactivar al paciente con cédula {paciente.CedulaPaciente}?");
        if (confirmar)
        {
            paciente.Anulado = false;
            paciente.FechaRegistro = DateTime.Now;
            paciente.EdadPaciente = CalcularEdad(paciente.FechaNacPaciente);

            var resultado = await ApiService.EditarPacienteAsync(paciente.IdPaciente, paciente);

            if (resultado.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Paciente reactivado correctamente.");
                await BuscarPacientes();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Error al reactivar paciente: {resultado.StatusCode}");
            }
        }
    }

}
