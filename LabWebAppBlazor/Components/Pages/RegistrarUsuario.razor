@page "/registrar-usuario"
@rendermode InteractiveServer
<PageTitle>Registro de Usuario</PageTitle>

@using LabWebAppBlazor.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IApiService ApiService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<h3 class="mb-4">Registro de Usuario</h3>

@if (!isRendered)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando...</strong>
    </div>
}
else if (!showContent)
{
    <div class="alert alert-warning">No autorizado.</div>
}
else if (!user.IsInRole("administrador"))
{
    <div class="alert alert-danger">No tienes permisos para acceder a esta sección.</div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-body">
            <EditForm Model="@nuevoUsuario" OnValidSubmit="Registrar">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" @bind-Value="nuevoUsuario.Nombre" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Correo electrónico</label>
                    <InputText type="email" class="form-control" @bind-Value="nuevoUsuario.CorreoUsuario" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Rol</label>
                    <InputSelect class="form-select" @bind-Value="nuevoUsuario.Rol">
                        <option value="">-- Seleccione --</option>
                        <option value="administrador">Administrador</option>
                        <option value="recepcionista">Recepcionista</option>
                        <option value="laboratorista">Laboratorista</option>
                    </InputSelect>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-person-plus-fill me-1"></i> Registrar Usuario
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private CrearUsuarioDto nuevoUsuario = new();
    private ClaimsPrincipal? user;
    private bool isRendered = false;
    private bool showContent = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
                Navigation.NavigateTo($"/login?ReturnUrl={Uri.EscapeDataString(returnUrl)}", forceLoad: true);
                return;
            }

            showContent = true;
            StateHasChanged();
        }
    }

    private async Task Registrar()
    {
        var response = await ApiService.RegistrarUsuarioAsync(nuevoUsuario);
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Usuario registrado exitosamente.\nSe generó una clave temporal.");
            nuevoUsuario = new();
        }
        else
        {
            var msg = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"Error: {msg}");
        }
    }
}
