@page "/resultados"
@rendermode InteractiveServer
@using LabWebAppBlazor.Models
@using LabWebAppBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IApiService ApiService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 class="mb-4">
    <i class="fas fa-vial me-2 text-primary"></i>Visualización de Resultados
</h3>

@if (!isRendered)
{
    <div class="d-flex align-items-center text-primary">
        <div class="spinner-border me-2" role="status"></div>
        <strong>Cargando interfaz...</strong>
    </div>
}
else if (!showContent)
{
    <div class="alert alert-danger text-center">
        <i class="fas fa-exclamation-triangle me-2"></i>No autorizado para ver esta sección.
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Buscar por</label>
            <InputSelect class="form-select" @bind-Value="criterioBusqueda">
                <option value="">-- Seleccione --</option>
                <option value="numero">Número de Resultado</option>
                <option value="cedula">Cédula</option>
                <option value="nombre">Nombre</option>
                <option value="fecha">Fecha Resultado</option>
                <option value="anulado">Estado</option>
            </InputSelect>
        </div>
        <div class="col-md-5">
            <label class="form-label">Valor</label>
            <InputText class="form-control" @bind-Value="valorBusqueda" />
        </div>
        <div class="col-md-4 d-flex align-items-end gap-2">
            <button class="btn btn-primary" @onclick="BuscarResultados" title="Buscar resultados">
                <i class="fas fa-search me-1"></i>Buscar
            </button>
            <button class="btn btn-outline-secondary" @onclick="LimpiarFiltro" title="Limpiar filtros">
                <i class="fas fa-eraser me-1"></i>Limpiar
            </button>
        </div>
    </div>

    @if (listaResultados == null || !listaResultados.Any())
    {
        <div class="alert alert-warning text-center">
            <i class="fas fa-folder-open me-2"></i>No se encontraron resultados para los criterios ingresados.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-bordered align-middle">
                <thead class="table-light text-center">
                    <tr>
                        <th>Número</th>
                        <th>Cédula</th>
                        <th>Paciente</th>
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in listaResultados)
                    {
                        <tr class="@((r.Anulado ? "table-danger" : ""))">
                            <td>@r.NumeroResultado</td>
                            <td>@r.CedulaPaciente</td>
                            <td>@r.NombrePaciente</td>
                            <td>@r.FechaResultado.ToString("dd/MM/yyyy")</td>
                            <td class="text-center">
                                <span class="badge bg-@(r.Anulado ? "danger" : "success")">
                                    @(r.Anulado ? "Deshabilitado" : "Habilitado")
                                </span>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm text-white shadow-sm"
                                        style="background-color: #007bff; border-radius: 0.5rem;"
                                        title="Ver Detalle"
                                        @onclick="() => VerDetalleResultado(r.IdResultado)">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@if (MostrarModalDetalle && DetalleActual is not null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-clipboard-list me-2 text-primary"></i>Detalle Resultado
                        <span class="badge bg-light text-dark">@DetalleActual.NumeroResultado</span>
                    </h5>
                    <button class="btn-close" @onclick="CerrarDetalle"></button>
                </div>
                <div class="modal-body">
                    @if (DetalleActual.Anulado)
                    {
                        <div class="alert alert-danger text-center fw-bold">
                            <i class="fas fa-ban me-2"></i>Este resultado ha sido anulado.
                        </div>
                    }

                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label">Cédula</label>
                            <input class="form-control" value="@DetalleActual.CedulaPaciente" disabled />
                        </div>
                        <div class="col-md-5">
                            <label class="form-label">Paciente</label>
                            <input class="form-control" value="@DetalleActual.NombrePaciente" disabled />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Fecha Resultado</label>
                            <input class="form-control" value="@DetalleActual.FechaResultado.ToString("dd/MM/yyyy")" disabled />
                        </div>
                    </div>

                    <h5 class="mb-2">Exámenes Realizados</h5>
                    <table class="table table-striped table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Examen</th>
                                <th>Valor</th>
                                <th>Unidad</th>
                                <th>Valor Referencia</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var d in DetalleActual.Examenes)
                            {
                                <tr>
                                    <td>@d.NombreExamen</td>
                                    <td>@d.Valor</td>
                                    <td>@d.Unidad</td>
                                    <td>@d.ValorReferencia</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (!DetalleActual.Anulado)
                {
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="AnularResultado">
                            <i class="fas fa-ban me-1"></i>Anular Resultado
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool isRendered = false;
    private bool showContent = false;
    private ClaimsPrincipal? user;

    private List<ResultadoDto> listaResultados = new();
    private string criterioBusqueda = "";
    private string valorBusqueda = "";

    private ResultadoDetalleDto? DetalleActual;
    private bool MostrarModalDetalle = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                Navigation.NavigateTo("/login", true);
                return;
            }

            showContent = true;
            await CargarResultados();
            StateHasChanged();
        }
    }

    private async Task CargarResultados()
    {
        listaResultados = (await ApiService.GetResultadosAsync()).ToList();
    }

    private async Task BuscarResultados()
    {
        await CargarResultados();

        if (!string.IsNullOrWhiteSpace(criterioBusqueda) && !string.IsNullOrWhiteSpace(valorBusqueda))
        {
            var valor = valorBusqueda.ToLower();
            listaResultados = criterioBusqueda switch
            {
                "numero" => listaResultados.Where(r => r.NumeroResultado.ToLower().Contains(valor)).ToList(),
                "cedula" => listaResultados.Where(r => r.CedulaPaciente.ToLower().Contains(valor)).ToList(),
                "nombre" => listaResultados.Where(r => r.NombrePaciente.ToLower().Contains(valor)).ToList(),
                "fecha" => listaResultados.Where(r => r.FechaResultado.ToString("dd/MM/yyyy").Contains(valor)).ToList(),
                "anulado" => valor == "anulado" ? listaResultados.Where(r => r.Anulado).ToList() :
                               valor == "activo" ? listaResultados.Where(r => !r.Anulado).ToList() : listaResultados,
                _ => listaResultados
            };
        }
    }

    private void LimpiarFiltro()
    {
        criterioBusqueda = "";
        valorBusqueda = "";
        _ = CargarResultados();
    }

    private async Task VerDetalleResultado(int id)
    {
        DetalleActual = await ApiService.ObtenerDetalleResultadoAsync(id);
        MostrarModalDetalle = true;
    }

    private void CerrarDetalle()
    {
        MostrarModalDetalle = false;
        DetalleActual = null;
    }

    private async Task AnularResultado()
    {
        if (DetalleActual is null) return;

        bool confirmar = await JS.InvokeAsync<bool>("SwalConfirm", "¿Está seguro que desea anular este resultado?");
        if (!confirmar) return;

        var response = await ApiService.AnularResultadoAsync(DetalleActual.IdResultado);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Resultado anulado correctamente.");
            MostrarModalDetalle = false;
            DetalleActual = null;
            await CargarResultados();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al anular el resultado.");
        }
    }
}
